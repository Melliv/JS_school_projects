{"version":3,"sources":["components/Alert.tsx","LoginLayout.tsx","components/Footer.tsx","context/AppContext.ts","components/Header.tsx","components/Sidebar.tsx","MainLayout.tsx","containers/home/HomeIndex.tsx","configuration.tsx","services/identity-service.ts","containers/identity/Login.tsx","types/EPageStatus.ts","components/Loader.tsx","services/base-service.ts","containers/bloodTest/Index.tsx","containers/bloodTest/Details.tsx","containers/bloodTest/Create.tsx","containers/bloodDonate/Index.tsx","containers/bloodDonate/Details.tsx","containers/bloodDonate/Create.tsx","containers/bloodTransfusion/Index.tsx","containers/bloodTransfusion/Details.tsx","containers/bloodTransfusion/Create.tsx","App.tsx","index.tsx"],"names":["EAlertClass","LoginLayout","children","className","type","asp-area","asp-controller","asp-action","role","Footer","initialAppState","token","firstName","lastName","setAuthInfo","AppContext","React","createContext","AppContextProvider","Provider","Header","Consumer","appState","useContext","data-toggle","data-target","aria-controls","aria-expanded","aria-label","title","to","Sidebar","id","xmlns","width","height","fill","viewBox","fillRule","d","aria-labelledby","data-parent","MainLayout","HomeIndex","Alert","props","show","alertClass","message","ApiBaseUrl","IdentityService","apiEndpoint","loginData","loginDataJson","JSON","stringify","this","axios","post","response","ok","status","statusCode","data","error","messages","Axios","create","baseURL","headers","EPageStatus","Login","useState","email","password","setLoginData","alertMessage","setAlertMessage","logInClicked","e","a","preventDefault","firstname","lastname","onSubmit","nativeEvent","Danger","htmlFor","value","onChange","target","name","placeholder","autoComplete","onClick","Loader","pageStatus","Loading","Error","BaseService","jwt","Authorization","get","getAxiosConfiguration","RowDisplay","bloodTest","allowed","donor","fullName","doctor","createAt","BloodTestIndex","bloodTests","setBloodTests","setPageStatus","loadData","getAll","result","OK","useEffect","map","toString","BloodTestDetails","useParams","setBloodTest","console","log","Info","isEmptyObject","_bloodTest","v-if","bloodGroup","bloodGroupValue","comments","createdBy","updateBy","updatedAt","initialFormValues","commentsId","donorId","doctorId","bloodGroupId","overviewData","FormView","values","handleChange","checked","rows","BloodTestCreate","setPatients","setDoctors","setBloodGroups","resultPatients","resultDoctors","resultBloodGroup","formValues","setFormValues","bloodDonate","amount","BloodDonateIndex","contactTypes","BloodDonateDetails","_bloodDonate","expireDate","bloodTestId","blootest","available","BloodDonateCreate","resultBloodTests","parseInt","bloodTransfusion","BloodTransfusionIndex","BloodTransfusionDetails","_bloodTransfusion","BloodTransfusionCreate","setAppState","path","component","exact","Home","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"sMAAYA,E,sGCsCGC,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACnB,OACI,qBAAKC,UAAU,sBAAf,SAEI,qBAAKA,UAAU,YAAf,SAEI,qBAAKA,UAAU,6BAAf,SAEI,qBAAKA,UAAU,+BAAf,SAEI,qBAAKA,UAAU,wCAAf,SACI,sBAAKA,UAAU,gBAAf,UAGI,qBAAKA,UAAU,YAAf,SACI,mBAAGC,KAAK,SAASD,UAAU,kBAAkBE,WAAS,GAAGC,iBAAe,OAAOC,aAAW,QAA1F,oBAGJ,qBAAKJ,UAAU,mBAAf,SACI,sBAAMK,KAAK,OAAOL,UAAU,OAA5B,SACKD,oBCP1BO,EAbA,WACX,OACI,wBAAQN,UAAU,sDAAlB,SACI,sBAAKA,UAAU,YAAf,iCAEI,mBAAGA,UAAU,YAAYE,WAAS,GAAGC,iBAAe,OAAOC,aAAW,UAAtE,2BCIHG,EAA8B,CACvCC,MAAO,KACPC,UAAW,GACXC,SAAU,GACVC,YAAa,SAACH,EAAsBC,EAAmBC,MAG9CE,EAAaC,IAAMC,cAAyBP,GAC5CQ,EAAqBH,EAAWI,SCe9BC,GDdmBL,EAAWM,SCd9B,WAEX,IAAMC,EAAWC,qBAAWR,GAE5B,OACI,mCACI,yBAAQZ,UAAU,2EAAlB,UACI,wBAAQA,UAAU,iBAAiBC,KAAK,SAASoB,cAAY,WAAWC,cAAY,mBAAmBC,gBAAc,yBACjHC,gBAAc,QAAQC,aAAW,oBADrC,SAEI,sBAAMzB,UAAU,0BAEpB,qBAAKA,UAAU,sDAAf,SACI,qBAAIA,UAAU,yBAAd,UACI,oBAAIA,UAAU,WAAd,SACI,oBAAGA,UAAU,qBAAqB0B,MAAM,SAAxC,oBACYP,EAASV,eAGzB,oBAAIT,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,kCAAkC2B,GAAG,kBAAxD,kCCuEbC,EA5FC,WACZ,OACI,qBAAI5B,UAAU,gEAAgE6B,GAAG,mBAAjF,UACI,eAAC,IAAD,CAAS7B,UAAU,iEAAkE2B,GAAG,IAAxF,UACI,qBAAKG,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAejC,UAAU,qBAAqBkC,QAAQ,YAA1H,SACI,sBAAMC,SAAS,UAAUC,EAAE,wNAE/B,qBAAKpC,UAAU,0BAAf,6BAGJ,oBAAIA,UAAU,oBAEd,qBAAKA,UAAU,kBAAf,qBAIA,oBAAIA,UAAU,WAAd,SACI,eAAC,IAAD,CAASA,UAAU,WAAW2B,GAAG,IAAjC,UACI,mBAAG3B,UAAU,4BACb,kDAIR,qBAAIA,UAAU,WAAd,UACI,eAAC,IAAD,CAASA,UAAU,qBAAqB2B,GAAG,IAAIN,cAAY,WAAWC,cAAY,eAC9EE,gBAAc,OAAOD,gBAAc,cADvC,UAEI,mBAAGvB,UAAU,qBACb,8CAEJ,qBAAK6B,GAAG,cAAc7B,UAAU,WAAWqC,kBAAgB,aAAaC,cAAY,oBAApF,SACI,sBAAKtC,UAAU,uCAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,cAAC,IAAD,CAASA,UAAU,gBAAgB2B,GAAG,GAAtC,qBACA,cAAC,IAAD,CAAS3B,UAAU,gBAAgB2B,GAAG,GAAtC,8BAKZ,oBAAI3B,UAAU,oBAEd,qBAAKA,UAAU,kBAAf,wBAIA,qBAAIA,UAAU,WAAd,UACI,eAAC,IAAD,CAASA,UAAU,qBAAqB2B,GAAG,IAAIN,cAAY,WAAWC,cAAY,eAC9EE,gBAAc,OAAOD,gBAAc,cADvC,UAEI,mBAAGvB,UAAU,qBACb,mDAEJ,qBAAK6B,GAAG,cAAc7B,UAAU,WAAWqC,kBAAgB,aAAaC,cAAY,oBAApF,SACI,sBAAKtC,UAAU,uCAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,cAAC,IAAD,CAASA,UAAU,gBAAgB2B,GAAG,aAAtC,mBACA,cAAC,IAAD,CAAS3B,UAAU,gBAAgB2B,GAAG,oBAAtC,4BAKZ,qBAAI3B,UAAU,WAAd,UACI,eAAC,IAAD,CAASA,UAAU,qBAAqB2B,GAAG,IAAIN,cAAY,WAAWC,cAAY,iBAC9EE,gBAAc,OAAOD,gBAAc,gBADvC,UAEI,mBAAGvB,UAAU,qBACb,oDAEJ,qBAAK6B,GAAG,gBAAgB7B,UAAU,WAAWqC,kBAAgB,eAAeC,cAAY,oBAAxF,SACI,sBAAKtC,UAAU,uCAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,cAAC,IAAD,CAASA,UAAU,gBAAgB2B,GAAG,eAAtC,uBACA,cAAC,IAAD,CAAS3B,UAAU,gBAAgB2B,GAAG,sBAAtC,4BAKZ,qBAAI3B,UAAU,WAAd,UACI,eAAC,IAAD,CAASA,UAAU,qBAAqB2B,GAAG,IAAIN,cAAY,WAAWC,cAAY,gBAC9EE,gBAAc,OAAOD,gBAAc,gBADvC,UAEI,mBAAGvB,UAAU,qBACb,uDAEJ,qBAAK6B,GAAG,eAAe7B,UAAU,WAAWqC,kBAAgB,cAAcC,cAAY,oBAAtF,SACI,sBAAKtC,UAAU,uCAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,cAAC,IAAD,CAASA,UAAU,gBAAgB2B,GAAG,oBAAtC,+BACA,cAAC,IAAD,CAAS3B,UAAU,gBAAgB2B,GAAG,2BAAtC,gCCtDTY,EA5BI,SAAC,GAAqB,IAApBxC,EAAmB,EAAnBA,SACjB,OACI,sBAAK8B,GAAG,UAAR,UAEI,cAAC,EAAD,IAEA,sBAAKA,GAAG,kBAAkB7B,UAAU,qBAApC,UAEI,cAAC,EAAD,IAEA,qBAAKA,UAAU,kBAAf,SACI,qBAAK6B,GAAG,UAAR,SACI,qBAAK7B,UAAU,YAAf,SACI,sBAAMK,KAAK,OAAOL,UAAU,OAA5B,SACKD,aAOrB,cAAC,EAAD,QCnBGyC,EANG,WACd,OACI,wC,iCPFI3C,K,wBAAAA,E,4BAAAA,E,wBAAAA,E,sBAAAA,E,wBAAAA,E,kBAAAA,E,oBAAAA,E,mBAAAA,M,KAWZ,IAKe4C,EALD,SAACC,GAEX,OAAOA,EAAMC,KAAO,qBAAK3C,UAAW,SAAW0C,EAAME,WAAYvC,KAAK,QAAlD,SAA2DqC,EAAMG,UAAiB,M,iCQb7FC,EAAa,gCCMJC,EAAtB,iIAQI,WAAmBC,EAAqBC,GAAxC,wFACQC,EAAgBC,KAAKC,UAAUH,GADvC,kBAG6BI,KAAKC,MAAMC,KAAqBP,EAAaE,GAH1E,cAGYM,EAHZ,yBAIe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAP3B,uCAWYC,EAXZ,uBAYe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAf1D,yDARJ,gEAAsBf,EACDO,MAAQS,IAAMC,OAAO,CAClCC,QAASnB,EACToB,QAAS,CACL,eAAgB,sBCJ5B,ICNYC,EDwDGC,EAlDD,WACV,IAAMjD,EAAWC,qBAAWR,GAE5B,EAAkCyD,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAAlE,mBAAOtB,EAAP,KAAkBuB,EAAlB,KACA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAEE,iBACsB,KAApB7B,EAAUqB,OAAuC,KAAvBrB,EAAUsB,UACpCG,EAAgB,4BAEpBA,EAAgB,IALC,SAMI3B,EAAgBqB,MAAM,gBAAiBnB,GAN3C,QAMbO,EANa,QAOHC,IAGViB,EAAgB,IAChBvD,EAASR,YAAY6C,EAASI,KAAMpD,MAAOgD,EAASI,KAAMmB,UAAWvB,EAASI,KAAMoB,WAHpFN,EAAgBlB,EAASM,SAAU,IARtB,2CAAH,sDAelB,OACI,qCACyB,OAAnB3C,EAASX,MAAiB,cAAC,IAAD,CAAUmB,GAAG,MAAS,KAClD,wCACA,sBAAMsD,SAAU,SAACL,GAAD,OAAOD,EAAaC,EAAEM,cAAtC,SACI,qBAAKlF,UAAU,MAAf,SACI,qBAAKA,UAAU,WAAf,SACI,oCACI,uBACA,cAAC,EAAD,CAAO2C,KAAuB,KAAjB8B,EAAqB5B,QAAS4B,EAAc7B,WAAY/C,EAAYsF,SACjF,sBAAKnF,UAAU,aAAf,UACI,uBAAOoF,QAAQ,cAAf,mBACA,uBAAOC,MAAOpC,EAAUqB,MAAOgB,SAAU,SAAAV,GAAC,OAAIJ,EAAa,2BAAKvB,GAAN,IAAiBqB,MAAOM,EAAEW,OAAOF,UAAUrF,UAAU,eAAeC,KAAK,QAAQ4B,GAAG,cAAc2D,KAAK,cAAcC,YAAY,mBAAoBC,aAAa,gBAEhO,sBAAK1F,UAAU,aAAf,UACI,uBAAOoF,QAAQ,iBAAf,sBACA,uBAAOC,MAAOpC,EAAUsB,SAAUe,SAAU,SAAAV,GAAC,OAAIJ,EAAa,2BAAKvB,GAAN,IAAiBsB,SAAUK,EAAEW,OAAOF,UAAUrF,UAAU,eAAeC,KAAK,WAAW4B,GAAG,iBAAiB2D,KAAK,iBAAiBC,YAAY,iCAAiCC,aAAa,wBAE5P,qBAAK1F,UAAU,aAAf,SACI,wBAAQ2F,QAAS,SAACf,GAAD,OAAOD,EAAaC,EAAEM,cAAcjF,KAAK,SAASD,UAAU,kBAA7E,oC,SC9CpBmE,K,qBAAAA,E,iBAAAA,E,SAAAA,M,KCEZ,IAUeyB,EAVA,SAAClD,GACZ,OAAIA,EAAMmD,aAAe1B,EAAY2B,QAC1B,qBAAK9F,UAAU,sBAAsBK,KAAK,QAA1C,wBAEPqC,EAAMmD,aAAe1B,EAAY4B,MAC1B,sBAAK/F,UAAU,qBAAqBK,KAAK,QAAzC,sBAA2DqC,EAAMiB,cAErE,8BCJWqC,EAAtB,0GAQI,SAAuCC,GACnC,GAAKA,EAML,MALmC,CAC/B/B,QAAS,CACLgC,cAAe,UAAYD,MAZ3C,2DAkBI,WAA6BjD,EAAqBiD,GAAlD,wGAE6B5C,KAAKC,MAAM6C,IAAenD,EAAagD,EAAYI,sBAAsBH,IAFtG,cAEYzC,EAFZ,yBAGe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAN3B,uCAUYC,EAVZ,uBAWe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAd1D,yDAlBJ,iHAsCI,WAA0Bd,EAAqBiD,GAA/C,wGAE6B5C,KAAKC,MAAM6C,IAAanD,EAAagD,EAAYI,sBAAsBH,IAFpG,cAEYzC,EAFZ,yBAGe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAN3B,uCAUYC,EAVZ,uBAWe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAd1D,yDAtCJ,gEAAsBkC,EACD1C,MAAQS,IAAMC,OAAO,CAClCC,QAASnB,EACToB,QAAS,CACL,eAAgB,sBCA5B,IAAMmC,EAAa,SAAC3D,GAAD,OACf,qCACI,6BAAKA,EAAM4D,UAAUC,QAAU,SAAM,WACrC,6BAAK7D,EAAM4D,UAAUE,MAAOC,WAC5B,6BAAK/D,EAAM4D,UAAUI,OAAQD,WAC7B,6BAAK/D,EAAM4D,UAAUK,WACrB,6BACI,cAAC,IAAD,CAAMhF,GAAI,cAAgBe,EAAM4D,UAAUzE,GAA1C,2BAqDG+E,EAhDQ,WACnB,MAAoCvC,mBAAS,IAA7C,mBAAOwC,EAAP,KAAmBC,EAAnB,KAEA,EAAoCzC,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYiB,OAAkB,aAAc9F,EAASX,OAD3D,QACT0G,EADS,QAGFzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDmD,EAAcI,EAAOtD,OAErBmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aAPzD,2CAAH,qDAed,OAJAyD,qBAAU,WACNJ,MACD,IAGC,qCACI,6CACA,wBAAOhH,UAAU,QAAjB,UACI,gCACI,+BACI,yCACA,uCACA,wCACA,4CACA,4BAGR,gCACK6G,EAAWQ,KAAI,SAAAf,GAAS,OACrB,6BACI,cAAC,EAAD,CAAYA,UAAWA,KADlBA,EAAUzE,GAAGyF,oBAMlC,cAAC,EAAD,eAAYzB,QC+DT0B,EAnHU,WACrB,IAAQ1F,EAAO2F,cAAP3F,GAER,EAAkCwC,mBAAS,CAAEiC,UAAW,KAAxD,mBAAOA,EAAP,KAAkBmB,EAAlB,KAEA,EAAoCpD,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAGtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYG,IAAe,cAAgBtE,EAAIV,EAASX,OAD9D,OACT0G,EADS,OAGbQ,QAAQC,IAAIT,GACRA,EAAOzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxD8D,EAAa,CAAEnB,UAAWY,EAAOtD,QAEjCmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aARzD,2CAAH,qDAYRiE,EAAO,SAAClF,GACV,IAAKmF,wBAAcnF,EAAM4D,WAAY,CACjCoB,QAAQC,IAAIjF,EAAM4D,WAElB,IAAMwB,EAAcpF,EAAM4D,UAC1B,OACI,qCACI,gCACI,4CACA,uBACA,qBAAKyB,OAAK,oBAAV,SACI,qBAAI/H,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,qBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWvB,QAAU,SAAM,WAE/B,oBAAIvG,UAAU,WAAd,yBAGD,oBAAIA,UAAU,YAAd,SACK8H,EAAWE,WAAYC,kBAE5B,oBAAIjI,UAAU,WAAd,mBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWtB,MAAOC,WAEvB,oBAAIzG,UAAU,WAAd,oBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWpB,OAAQD,WAExB,oBAAIzG,UAAU,WAAd,sBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWI,WAEhB,oBAAIlI,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWK,YAEhB,oBAAInI,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWnB,WAEhB,oBAAI3G,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWM,WAEhB,oBAAIpI,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK8H,EAAWO,oBAM5B,8BACI,cAAC,IAAD,CAAMrI,UAAU,qBAAqB2B,GAAG,cAAxC,0BAIhB,OAAO,8BAOX,OAJAyF,qBAAU,WACNJ,MACD,IAGC,qCACI,yCAEA,cAACY,EAAD,eAAUtB,IAEV,cAAC,EAAD,eAAYT,QCjHlByC,EAA+B,CACjCzG,GAAI,uCACJsG,UAAW,IACXxB,SAAU,sBACVyB,SAAU,IACVC,UAAW,sBACX9B,SAAS,EACTgC,WAAY,uCACZL,SAAU,GACVM,QAAS,GACThC,MAAO,KACPiC,SAAU,GACV/B,OAAQ,KACRgC,aAAc,GACdV,WAAY,KACZW,aAAc,IASZC,EAAW,SAAClG,GAAuB,IAAD,UACpC,OACI,iCACI,sBAAK1C,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,oBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOJ,gBAAf,QAA2B,EAAGnD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,SAAtH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,mBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOL,eAAf,QAA0B,EAAGlD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,QAArH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,yBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOH,oBAAf,QAA+B,EAAGpD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,aAA1H,SACI,gCAIR,sBAAK7B,UAAU,mBAAf,UACI,uBAAOA,UAAU,gBAAjB,qBACA,uBAAO+I,QAAO,UAAErG,EAAMmG,OAAOtC,eAAf,SAAiCjB,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAAStF,KAAK,WAAWD,UAAU,eAAe6B,GAAG,eAG9I,sBAAK7B,UAAU,aAAf,UACI,uBAAOoF,QAAQ,eAAf,sBACA,0BAAUC,MAAK,UAAE3C,EAAMmG,OAAOX,gBAAf,QAA2B,EAAG5C,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,WAAWmH,KAAM,OAG7I,qBAAKhJ,UAAU,aAAf,SACI,wBAAQC,KAAK,SAASD,UAAU,kBAAhC,0BAiFDiJ,EA1ES,WACnB,MAAgC5E,mBAAS,IAAzC,mBAAiB6E,GAAjB,WACA,EAA8B7E,mBAAS,IAAvC,mBAAgB8E,GAAhB,WACA,EAAsC9E,mBAAS,IAA/C,mBAAoB+E,GAApB,WAGD,EAAoC/E,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAmBoD,GAAnB,WAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,gCAAAnC,EAAA,sEACcmB,EAAYiB,OAAe,8BAA+B9F,EAASX,OADjF,cACT6I,EADS,gBAEarD,EAAYiB,OAAe,6BAA8B9F,EAASX,OAF/E,cAET8I,EAFS,gBAGgBtD,EAAYiB,OAAmB,cAAe9F,EAASX,OAHvE,OAGT+I,EAHS,OAKTF,EAAe5F,IAAM4F,EAAezF,MACpC0F,EAAc7F,IAAM6F,EAAc1F,MAClC2F,EAAiB9F,IAAM8F,EAAiB3F,MACxCmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDuF,EAAYG,EAAezF,MAC3BuF,EAAWG,EAAc1F,MACzBwF,EAAeG,EAAiB3F,OAEhCmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAY4F,EAAiB5F,aAbnE,4CAAH,qDAiBdyD,qBAAU,WACNJ,MACD,IAEH,MAAoC3C,mBAASiE,GAA7C,mBAAOkB,EAAP,KAAmBC,EAAnB,KA4BA,OACQ,qCACI,wCACA,4CACA,uBACA,qBAAKzJ,UAAU,MAAf,SACI,qBAAKA,UAAU,WAAf,SACA,cAAC,EAAD,CAAU6I,OAAQW,EAAYV,aAjCzB,SAACvD,GAElBmC,QAAQC,IAAIpC,GAEM,WAAdA,EAAO1D,GAIO,UAAd0D,EAAO1D,GAIO,eAAd0D,EAAO1D,GAIO,YAAd0D,EAAO1D,GAIO,aAAd0D,EAAO1D,IACP4H,EAAc,2BAAKD,GAAN,IAAkBtB,SAAU3C,EAAOF,SAJhDoE,EAAc,2BAAKD,GAAN,IAAkBjD,QAAUhB,EAA4BwD,WAJrEU,EAAc,2BAAKD,GAAN,IAAkBd,aAAcnD,EAAOF,SAJpDoE,EAAc,2BAAKD,GAAN,IAAkBhB,QAASjD,EAAOF,SAJ/CoE,EAAc,2BAAKD,GAAN,IAAkBf,SAAUlD,EAAOF,oBCxGtDgB,EAAa,SAAC3D,GAAD,OACf,qCACI,6BAAKA,EAAMgH,YAAY1B,WAAYC,kBACnC,6BAAKvF,EAAMgH,YAAYC,SACvB,6BAAKjH,EAAMgH,YAAYlD,MAAOC,WAC9B,6BAAK/D,EAAMgH,YAAYhD,OAAQD,WAC/B,6BAAK/D,EAAMgH,YAAY/C,WACvB,6BACI,cAAC,IAAD,CAAMhF,GAAI,gBAAkBe,EAAMgH,YAAY7H,GAA9C,2BAsDG+H,EAjDU,WACrB,MAAsCvF,mBAAS,IAA/C,mBAAOwF,EAAP,KAAqB/C,EAArB,KAEA,EAAoCzC,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYiB,OAAoB,eAAgB9F,EAASX,OAD/D,QACT0G,EADS,QAGFzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDmD,EAAcI,EAAOtD,OAErBmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aAPzD,2CAAH,qDAed,OAJAyD,qBAAU,WACNJ,MACD,IAGC,qCACI,iDACA,wBAAOhH,UAAU,QAAjB,UACI,gCACI,+BACI,6CACA,wCACA,uCACA,wCACA,4CACA,4BAGR,gCACK6J,EAAaxC,KAAI,SAAAqC,GAAW,OACzB,6BACI,cAAC,EAAD,CAAYA,YAAaA,KADpBA,EAAY7H,GAAGyF,oBAMpC,cAAC,EAAD,eAAYzB,QCuDTiE,EA7GY,WACvB,IAAQjI,EAAO2F,cAAP3F,GAER,EAAoCwC,mBAAS,CAAEqF,YAAa,KAA5D,mBAAOA,EAAP,KAAoBjC,EAApB,KAEA,EAAoCpD,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAGtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYG,IAAiB,gBAAkBtE,EAAIV,EAASX,OADlE,QACT0G,EADS,QAGFzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxD8D,EAAa,CAAEiC,YAAaxC,EAAOtD,QAEnCmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aAPzD,2CAAH,qDAWRiE,EAAO,SAAClF,GACV,IAAKmF,wBAAcnF,EAAMgH,aAAc,CACnC,IAAMK,EAAerH,EAAMgH,YAC3B,OACI,qCACI,gCACI,gDACA,uBACA,qBAAI1J,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,yBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAa/B,WAAYC,kBAE9B,oBAAIjI,UAAU,WAAd,oBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAaJ,SAElB,oBAAI3J,UAAU,WAAd,mBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAavD,MAAOC,WAEzB,oBAAIzG,UAAU,WAAd,oBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAarD,OAAQD,WAE1B,oBAAIzG,UAAU,WAAd,yBAGA,oBAAIA,UAAU,YAAd,SACM+J,EAAaC,aAEnB,oBAAIhK,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAa5B,YAElB,oBAAInI,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAapD,WAElB,oBAAI3G,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAa3B,WAElB,oBAAIpI,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK+J,EAAa1B,kBAI1B,8BACI,cAAC,IAAD,CAAMrI,UAAU,qBAAqB2B,GAAG,gBAAxC,0BAIhB,OAAO,8BAOX,OAJAyF,qBAAU,WACNJ,MACD,IAGC,qCACI,yCAEA,cAACY,EAAD,eAAU8B,IAEV,cAAC,EAAD,eAAY7D,QC3GlByC,EAAiC,CACnCzG,GAAI,uCACJsG,UAAW,IACXxB,SAAU,sBACVyB,SAAU,IACVC,UAAW,sBACXG,QAAS,GACThC,MAAO,KACPiC,SAAU,GACV/B,OAAQ,KACRuD,YAAa,GACbC,SAAU,KACVxB,aAAc,uCACdV,WAAY,KACZ2B,OAAQ,EACRQ,WAAW,EACXH,WAAY,uBASVpB,EAAW,SAAClG,GAAuB,IAAD,QACpC,OACI,iCACI,sBAAK1C,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,mBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOL,eAAf,QAA0B,EAAGlD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,QAArH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,oBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOJ,gBAAf,QAA2B,EAAGnD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,SAAtH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,wBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOoB,mBAAf,QAA8B,EAAG3E,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,YAAzH,SACI,gCAIR,sBAAK7B,UAAU,mBAAf,UACI,uBAAOA,UAAU,gBAAjB,oBACA,uBAAOqF,MAAK,UAAE3C,EAAMmG,OAAOc,cAAf,QAAyB,EAAGrE,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,cAGvH,qBAAK7B,UAAU,aAAf,SACI,wBAAQC,KAAK,SAASD,UAAU,kBAAhC,0BA6EDoK,EAtEW,WACrB,MAAgC/F,mBAAS,IAAzC,mBAAiB6E,GAAjB,WACA,EAA8B7E,mBAAS,IAAvC,mBAAgB8E,GAAhB,WACA,EAAqC9E,mBAAS,IAA9C,mBAAoByC,GAApB,WAGD,EAAoCzC,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAmBoD,GAAnB,WAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,gCAAAnC,EAAA,sEACcmB,EAAYiB,OAAe,8BAA+B9F,EAASX,OADjF,cACT6I,EADS,gBAEarD,EAAYiB,OAAe,6BAA8B9F,EAASX,OAF/E,cAET8I,EAFS,gBAGgBtD,EAAYiB,OAAkB,aAAc9F,EAASX,OAHrE,OAGT6J,EAHS,OAKThB,EAAe5F,IAAM4F,EAAezF,MACpC0F,EAAc7F,IAAM6F,EAAc1F,MAClCyG,EAAiB5G,IAAM4G,EAAiBzG,MACxCmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDuF,EAAYG,EAAezF,MAC3BuF,EAAWG,EAAc1F,MACzBkD,EAAcuD,EAAiBzG,OAE/BmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAY0G,EAAiB1G,aAbnE,4CAAH,qDAiBdyD,qBAAU,WACNJ,MACD,IAEH,MAAoC3C,mBAASiE,GAA7C,mBAAOkB,EAAP,KAAmBC,EAAnB,KAwBA,OACQ,qCACI,wCACA,8CACA,uBACA,qBAAKzJ,UAAU,MAAf,SACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CAAU6I,OAAQW,EAAYV,aA7B7B,SAACvD,GAElBmC,QAAQC,IAAIpC,GAEM,WAAdA,EAAO1D,GAIO,UAAd0D,EAAO1D,GAIO,cAAd0D,EAAO1D,GAIO,WAAd0D,EAAO1D,IACP4H,EAAc,2BAAKD,GAAN,IAAkBG,OAAQW,SAAS/E,EAAOF,UAJvDoE,EAAc,2BAAKD,GAAN,IAAkBd,aAAcnD,EAAOF,SAJpDoE,EAAc,2BAAKD,GAAN,IAAkBhB,QAASjD,EAAOF,SAJ/CoE,EAAc,2BAAKD,GAAN,IAAkBf,SAAUlD,EAAOF,oBCpGtDgB,EAAa,SAAC3D,GAAD,OACf,qCACI,6BAAKA,EAAM6H,iBAAiBZ,SAC5B,6BAAKjH,EAAM6H,iBAAiBvC,WAAYC,kBACxC,6BAAKvF,EAAM6H,iBAAiB/D,MAAOC,WACnC,6BAAK/D,EAAM6H,iBAAiB7D,OAAQD,WACpC,6BAAK/D,EAAM6H,iBAAiB5D,WAC5B,6BACI,cAAC,IAAD,CAAMhF,GAAI,qBAAuBe,EAAM6H,iBAAiB1I,GAAxD,2BAsDG2I,EAjDe,WAC1B,MAAsCnG,mBAAS,IAA/C,mBAAOwF,EAAP,KAAqB/C,EAArB,KAEA,EAAoCzC,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYiB,OAAyB,oBAAqB9F,EAASX,OADzE,QACT0G,EADS,QAGFzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDmD,EAAcI,EAAOtD,OAErBmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aAPzD,2CAAH,qDAed,OAJAyD,qBAAU,WACNJ,MACD,IAGC,qCACI,6CACA,wBAAOhH,UAAU,QAAjB,UACI,gCACI,+BACI,wCACA,6CACA,uCACA,wCACA,4CACA,4BAGR,gCACK6J,EAAaxC,KAAI,SAAAkD,GAAgB,OAC9B,6BACI,cAAC,EAAD,CAAYA,iBAAkBA,KADzBA,EAAiB1I,GAAGyF,oBAMzC,cAAC,EAAD,eAAYzB,QC2DT4E,EAjHiB,WAC5B,IAAQ5I,EAAO2F,cAAP3F,GAER,EAAyCwC,mBAAS,CAAEkG,iBAAkB,KAAtE,mBAAOA,EAAP,KAAyB9C,EAAzB,KAEA,EAAoCpD,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAOkC,EAAP,KAAmBkB,EAAnB,KAEM5F,EAAWC,qBAAWR,GAGtBoG,EAAQ,uCAAG,4BAAAnC,EAAA,sEACMmB,EAAYG,IAAsB,qBAAuBtE,EAAIV,EAASX,OAD5E,OACT0G,EADS,OAGbQ,QAAQC,IAAIT,GACRA,EAAOzD,IAAMyD,EAAOtD,MACpBmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxD8D,EAAa,CAAE8C,iBAAkBrD,EAAOtD,QAExCmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAYuD,EAAOvD,aARzD,2CAAH,qDAYRiE,EAAO,SAAClF,GACV,IAAKmF,wBAAcnF,EAAM6H,kBAAmB,CACxC7C,QAAQC,IAAIjF,EAAM6H,kBAElB,IAAMG,EAAqBhI,EAAM6H,iBACjC,OACI,qCACI,gCACI,mDACA,uBACA,qBAAIvK,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,oBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBf,SAEvB,oBAAI3J,UAAU,WAAd,yBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkB1C,WAAYC,kBAEnC,oBAAIjI,UAAU,WAAd,mBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBlE,MAAOC,WAE9B,oBAAIzG,UAAU,WAAd,oBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBhE,OAAQD,WAE/B,oBAAIzG,UAAU,WAAd,sBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBxC,WAEvB,oBAAIlI,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBvC,YAEvB,oBAAInI,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkB/D,WAEvB,oBAAI3G,UAAU,WAAd,uBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBtC,WAEvB,oBAAIpI,UAAU,WAAd,wBAGA,oBAAIA,UAAU,YAAd,SACK0K,EAAkBrC,kBAK/B,8BACI,cAAC,IAAD,CAAMrI,UAAU,qBAAqB2B,GAAG,qBAAxC,0BAIhB,OAAO,8BAOX,OAJAyF,qBAAU,WACNJ,MACD,IAGC,qCACI,yCAEA,cAACY,EAAD,eAAU2C,IAEV,cAAC,EAAD,eAAY1E,QC/GlByC,EAAsC,CACxCzG,GAAI,uCACJsG,UAAW,IACXxB,SAAU,sBACVyB,SAAU,IACVC,UAAW,sBACXsB,OAAQ,EACRpB,WAAY,uCACZL,SAAU,GACVM,QAAS,GACThC,MAAO,KACPiC,SAAU,GACV/B,OAAQ,KACRgC,aAAc,GACdV,WAAY,MASVY,EAAW,SAAClG,GAAuB,IAAD,UACpC,OACI,iCACI,sBAAK1C,UAAU,mBAAf,UACI,uBAAOA,UAAU,gBAAjB,oBACA,uBAAOqF,MAAK,UAAE3C,EAAMmG,OAAOc,cAAf,QAAyB,EAAGrE,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAAStF,KAAK,OAAOD,UAAU,eAAe6B,GAAG,cAGnI,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,mBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOL,eAAf,QAA0B,EAAGlD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,QAArH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,oBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOJ,gBAAf,QAA2B,EAAGnD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,SAAtH,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOA,UAAU,gBAAjB,yBACA,wBAAQqF,MAAK,UAAE3C,EAAMmG,OAAOH,oBAAf,QAA+B,EAAGpD,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,aAA1H,SACI,gCAIR,sBAAK7B,UAAU,aAAf,UACI,uBAAOoF,QAAQ,eAAf,sBACA,0BAAUC,MAAK,UAAE3C,EAAMmG,OAAOX,gBAAf,QAA2B,EAAG5C,SAAU,SAACV,GAAD,OAAOlC,EAAMoG,aAAalE,EAAEW,SAASvF,UAAU,eAAe6B,GAAG,WAAWmH,KAAM,OAG7I,qBAAKhJ,UAAU,aAAf,SACI,wBAAQC,KAAK,SAASD,UAAU,kBAAhC,0BAgFD2K,GAzEgB,WAC1B,MAAgCtG,mBAAS,IAAzC,mBAAiB6E,GAAjB,WACA,EAA8B7E,mBAAS,IAAvC,mBAAgB8E,GAAhB,WACA,EAAsC9E,mBAAS,IAA/C,mBAAoB+E,GAApB,WAGD,EAAoC/E,mBAAS,CAAEwB,WAAY1B,EAAY2B,QAASnC,YAAa,IAA7F,mBAAmBoD,GAAnB,WAEM5F,EAAWC,qBAAWR,GAEtBoG,EAAQ,uCAAG,gCAAAnC,EAAA,sEACcmB,EAAYiB,OAAe,8BAA+B9F,EAASX,OADjF,cACT6I,EADS,gBAEarD,EAAYiB,OAAe,6BAA8B9F,EAASX,OAF/E,cAET8I,EAFS,gBAGgBtD,EAAYiB,OAAmB,cAAe9F,EAASX,OAHvE,OAGT+I,EAHS,OAKTF,EAAe5F,IAAM4F,EAAezF,MACpC0F,EAAc7F,IAAM6F,EAAc1F,MAClC2F,EAAiB9F,IAAM8F,EAAiB3F,MACxCmD,EAAc,CAAElB,WAAY1B,EAAYgD,GAAIxD,WAAY,IACxDuF,EAAYG,EAAezF,MAC3BuF,EAAWG,EAAc1F,MACzBwF,EAAeG,EAAiB3F,OAEhCmD,EAAc,CAAElB,WAAY1B,EAAY4B,MAAOpC,WAAY4F,EAAiB5F,aAbnE,4CAAH,qDAiBdyD,qBAAU,WACNJ,MACD,IAEH,MAAoC3C,mBAASiE,GAA7C,mBAAOkB,EAAP,KAAmBC,EAAnB,KA2BA,OACQ,qCACI,wCACA,mDACA,uBACA,qBAAKzJ,UAAU,MAAf,SACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CAAU6I,OAAQW,EAAYV,aAhC7B,SAACvD,GAClBmC,QAAQC,IAAIpC,GAEM,WAAdA,EAAO1D,GAIO,WAAd0D,EAAO1D,GAIO,UAAd0D,EAAO1D,GAIO,eAAd0D,EAAO1D,GAIO,aAAd0D,EAAO1D,IACP4H,EAAc,2BAAKD,GAAN,IAAkBtB,SAAU3C,EAAOF,SAJhDoE,EAAc,2BAAKD,GAAN,IAAkBd,aAAcnD,EAAOF,SAJpDoE,EAAc,2BAAKD,GAAN,IAAkBhB,QAASjD,EAAOF,SAJ/CoE,EAAc,2BAAKD,GAAN,IAAkBf,SAAUlD,EAAOF,SAJhDoE,EAAc,2BAAKD,GAAN,IAAkBG,OAAQW,SAAS/E,EAAOF,qBCzFpD,cACX,IAIA,EAAgChB,mBAAS,2BAAK9D,GAAN,IAAuBI,YAJ3C,SAACH,EAAsBC,EAAmBC,GAC1DkK,EAAY,2BAAKzJ,GAAN,IAAgBX,QAAOC,YAAWC,kBAGjD,mBAAOS,EAAP,KAAiByJ,EAAjB,KAEA,OACI,mCACA,cAAC7J,EAAD,CAAoBsE,MAAOlE,EAA3B,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAO0J,KAAK,YAAZ,SACI,cAAC,EAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOA,KAAK,kBAAkBC,UAAW1G,UAKrD,cAAC,IAAD,UACI,cAAC,EAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyG,KAAK,IAAIE,OAAK,EAACD,UAAWE,IACjC,cAAC,IAAD,CAAOH,KAAK,aAAaE,OAAK,EAACD,UAAWlE,IAC1C,cAAC,IAAD,CAAOiE,KAAK,oBAAoBE,OAAK,EAACD,UAAW7B,IACjD,cAAC,IAAD,CAAO4B,KAAK,iBAAiBE,OAAK,EAACD,UAAWvD,IAC9C,cAAC,IAAD,CAAOsD,KAAK,eAAeE,OAAK,EAACD,UAAWlB,IAC5C,cAAC,IAAD,CAAOiB,KAAK,sBAAsBE,OAAK,EAACD,UAAWV,IACnD,cAAC,IAAD,CAAOS,KAAK,mBAAmBE,OAAK,EAACD,UAAWhB,IAChD,cAAC,IAAD,CAAOe,KAAK,oBAAoBE,OAAK,EAACD,UAAWN,IACjD,cAAC,IAAD,CAAOK,KAAK,2BAA2BE,OAAK,EAACD,UAAWH,KACxD,cAAC,IAAD,CAAOE,KAAK,wBAAwBE,OAAK,EAACD,UAAWL,qBCtCrFQ,IAASC,OACL,eAAC,IAAD,WACA,cAAC,IAAMC,WAAP,UACI,cAACC,GAAD,MAFJ,OAKAC,SAASC,eAAe,W","file":"static/js/main.5b729c32.chunk.js","sourcesContent":["export enum EAlertClass {\n    Primary = 'alert-primary',\n    Secondary = 'alert-secondary',\n    Success = 'alert-success',\n    Danger = 'alert-danger',\n    Warning = 'alert-warning',\n    Info = 'alert-info',\n    Light = 'alert-light',\n    Dark = 'alert-dark',\n}\n\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\n    \n    return props.show ? <div className={'alert ' + props.alertClass} role=\"alert\">{props.message}</div> : null;\n}\n\nexport default Alert;","const LoginLayout = ( {children}: any ) => {\r\n    return(\r\n        <div className=\"bg-gradient-primary\">\r\n\r\n            <div className=\"container\">\r\n\r\n                <div className=\"row justify-content-center\">\r\n\r\n                    <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n\r\n                        <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                            <div className=\"card-body p-0\">\r\n\r\n\r\n                                <div className=\"container\">\r\n                                    <a type=\"button\" className=\"btn btn-primary\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\">Home</a>\r\n                                </div>\r\n\r\n                                <div className=\"container m-auto\">\r\n                                    <main role=\"main\" className=\"pb-3\">\r\n                                        {children}\r\n                                    </main>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginLayout;\r\n","const Footer = () => {\r\n    return (\r\n        <footer className=\"footer bg-dark text-center text-lg-start text-light\">\r\n            <div className=\"container\">\r\n                &copy; 2021 - Bloody -\r\n                <a className=\"text-info\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Privacy\">\r\n                    Privacy\r\n                </a>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\n\nexport interface IAppState {\n    token: string | null;\n    firstName: string;\n    lastName: string;\n    setAuthInfo: (token: string | null, firstName: string, lastName: string) => void;\n}\n\nexport const initialAppState : IAppState = {\n    token: null,\n    firstName: '',\n    lastName: '',\n    setAuthInfo: (token: string | null, firstName: string, lastName: string): void => {}\n}\n\nexport const AppContext = React.createContext<IAppState>(initialAppState);\nexport const AppContextProvider = AppContext.Provider;\nexport const AppContextConsumer = AppContext.Consumer;\n","import { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Header = () => {\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    return (\r\n        <>\r\n            <header className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"navbar-collapse collapse d-flex justify-content-end\">\r\n                    <ul className=\"navbar-nav float-right\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link text-dark\" title=\"Manage\">\r\n                                Hello! {appState.firstName}\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link btn btn-link text-dark\" to=\"/Identity/Login\">Logout</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </header>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","import { NavLink } from \"react-router-dom\";\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <ul className=\"navbar-nav bg-gradient-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\">\r\n            <NavLink className=\"sidebar-brand d-flex align-items-center justify-content-center\"  to=\"/\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" className=\"bi bi-droplet-fill\" viewBox=\"0 0 16 16\">\r\n                    <path fillRule=\"evenodd\" d=\"M8 16a6 6 0 0 0 6-6c0-1.655-1.122-2.904-2.432-4.362C10.254 4.176 8.75 2.503 8 0c0 0-6 5.686-6 10a6 6 0 0 0 6 6zM6.646 4.646c-.376.377-1.272 1.489-2.093 3.13l.894.448c.78-1.559 1.616-2.58 1.907-2.87l-.708-.708z\" />\r\n                </svg>\r\n                <div className=\"sidebar-brand-text mx-3\">Blood Center</div>\r\n            </NavLink>\r\n\r\n            <hr className=\"sidebar-divider\" />\r\n\r\n            <div className=\"sidebar-heading\">\r\n                General\r\n            </div>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/\">\r\n                    <i className=\"fas fa-fw fa-chart-area\"></i>\r\n                    <span>BloodBank</span>\r\n                </NavLink>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseOne\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Persons</span>\r\n                </NavLink>\r\n                <div id=\"collapseOne\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"\">Persons</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"\">Register</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <hr className=\"sidebar-divider\" />\r\n\r\n            <div className=\"sidebar-heading\">\r\n                Activities\r\n            </div>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseTwo\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseTwo\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>BloodTesting</span>\r\n                </NavLink>\r\n                <div id=\"collapseTwo\" className=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTest\">Tests</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTest/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseThree\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseThree\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>BloodDonation</span>\r\n                </NavLink>\r\n                <div id=\"collapseThree\" className=\"collapse\" aria-labelledby=\"headingThree\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodDonate\">Donations</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodDonate/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseFore\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseThree\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>BloodTransfusion</span>\r\n                </NavLink>\r\n                <div id=\"collapseFore\" className=\"collapse\" aria-labelledby=\"headingFore\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTransfusion\">BloodTransfusions</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTransfusion/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import Footer from './components/Footer';\r\nimport Header from './components/Header';\r\nimport Sidebar from './components/Sidebar';\r\n\r\nconst MainLayout = ({children}: any) => {\r\n    return (\r\n        <div id=\"wrapper\">\r\n\r\n            <Sidebar />\r\n\r\n            <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n\r\n                <Header />\r\n\r\n                <div className=\"container-fluid\">\r\n                    <div id=\"content\">\r\n                        <div className=\"container\">\r\n                            <main role=\"main\" className=\"pb-3\">\r\n                                {children}\r\n                            </main>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Footer />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MainLayout;\r\n","const HomeIndex = () => {\r\n    return (\r\n        <div>Home</div>\r\n    );\r\n}\r\n\r\nexport default HomeIndex;","export const ApiBaseUrl = \"https://localhost:5051/api/v1\";","import { ILoginResponse } from './../types/ILoginResponse';\nimport Axios, { AxiosError } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class IdentityService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    static async Login(apiEndpoint: string, loginData: {email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(loginData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n}","import React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Login = () => {\n    const appState = useContext(AppContext);\n\n    const [loginData, setLoginData] = useState({ email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const logInClicked = async (e: Event) => {\n        e.preventDefault();\n        if (loginData.email === '' || loginData.password === '') {\n            setAlertMessage('Empty email or pawwsord!');\n        };\n        setAlertMessage('');\n        let response = await IdentityService.Login('account/login', loginData);\n        if (!response.ok) {\n            setAlertMessage(response.messages![0]);\n        } else {\n            setAlertMessage('');\n            appState.setAuthInfo(response.data!.token, response.data!.firstname, response.data!.lastname);\n        }\n    }\n\n    return (\n        <>\n            { appState.token !== null ? <Redirect to=\"/\" /> : null}\n            <h1>Log in</h1>\n            <form onSubmit={(e) => logInClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr />\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={loginData.email} onChange={e => setLoginData({ ...loginData, email: e.target.value })} className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\"  autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={loginData.password} onChange={e => setLoginData({ ...loginData, password: e.target.value })} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input your current password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => logInClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Log in</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nexport default Login;","export enum EPageStatus {\n    Loading = \"Loading...\",\n    Error = \"Error...\",\n    OK = \"Ok\",\n}\n","import { EPageStatus } from \"../types/EPageStatus\";\n\nconst Loader = (props: {pageStatus:EPageStatus, statusCode:  number}) => {\n    if (props.pageStatus === EPageStatus.Loading){\n        return <div className=\"alert alert-primary\" role=\"alert\">Loading...</div>;\n    }\n    if (props.pageStatus === EPageStatus.Error) {\n        return <div className=\"alert alert-danger\" role=\"alert\">Error... {props.statusCode}</div>\n    }\n    return <></>;\n}\n\nexport default Loader;","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class BaseService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\n        if (!jwt) return undefined;\n        const config: AxiosRequestConfig = {\n            headers: {\n                Authorization: 'Bearer ' + jwt\n            }\n        };  \n        return config;      \n    }\n\n    static async getAll<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> {\n        try {\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n    static async get<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        try {\n            let response = await this.axios.get<TEntity>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n \r\nconst RowDisplay = (props: { bloodTest: BloodTest }) => (\r\n    <>\r\n        <td>{props.bloodTest.allowed ? '✔' : '❌'}</td>\r\n        <td>{props.bloodTest.donor!.fullName}</td>\r\n        <td>{props.bloodTest.doctor!.fullName}</td>\r\n        <td>{props.bloodTest.createAt}</td>\r\n        <td>\r\n            <Link to={'/BloodTest/' + props.bloodTest.id}>Details</Link>\r\n        </td>\r\n    </>\r\n);\r\n\r\nconst BloodTestIndex = () => {\r\n    const [bloodTests, setBloodTests] = useState([] as BloodTest[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<BloodTest>('/BloodTest', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTests(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood tests</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Allowed</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {bloodTests.map(bloodTest =>\r\n                        <tr key={bloodTest.id.toString()}>\r\n                            <RowDisplay bloodTest={bloodTest} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTestIndex;","import { isEmptyObject } from \"jquery\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, NavLink, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst BloodTestDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const [bloodTest, setBloodTest] = useState({ bloodTest: {} });\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<BloodTest>('/BloodTest/' + id, appState.token!);\r\n\r\n        console.log(result);\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTest({ bloodTest: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const Info = (props: { bloodTest: {} }) => {\r\n        if (!isEmptyObject(props.bloodTest)) {\r\n            console.log(props.bloodTest);\r\n\r\n            const _bloodTest = (props.bloodTest as BloodTest)\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood test</h4>\r\n                        <hr />\r\n                        <div v-if=\"bloodTest != null\" >\r\n                            <dl className=\"row\">\r\n                                <dt className=\"col-sm-2\">\r\n                                    Allowed\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.allowed ? '✔' : '❌'}\r\n                                </dd>\r\n                                 <dt className=\"col-sm-2\">\r\n                                    Blood group\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.bloodGroup!.bloodGroupValue}\r\n                                </dd> \r\n                                <dt className=\"col-sm-2\">\r\n                                    Donor\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.donor!.fullName}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Doctor\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.doctor!.fullName}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Comments\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.comments}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Created by\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.createdBy}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Create at\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.createAt}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Update by\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.updateBy}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Updated at\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.updatedAt}\r\n                                </dd>\r\n                            </dl>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <Link className=\"nav-link text-dark\" to=\"/BloodTest/\">to list</Link>\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodTest} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTestDetails;","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodGroup } from \"../../dto/BloodGroup\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst initialFormValues: BloodTest = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    allowed: false,\r\n    commentsId: \"00000000-0000-0000-0000-000000000000\",\r\n    comments: \"\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodGroupId: \"\",\r\n    bloodGroup: null,\r\n    overviewData: \"\"\r\n};\r\n\r\nexport interface IFormProps {\r\n    values: BloodTest;\r\n\r\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\r\n}\r\n\r\nconst FormView = (props: IFormProps) => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Doctor</label>\r\n                <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Donor</label>\r\n                <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Blood group</label>\r\n                <select value={props.values.bloodGroupId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodGroup\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group col-3\">\r\n                <label className=\"control-label\">Allowed</label>\r\n                <input checked={props.values.allowed ?? false} onChange={(e) => props.handleChange(e.target)} type=\"checkbox\" className=\"form-control\" id=\"allowed\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"formTextArea\">Comments</label>\r\n                <textarea value={props.values.comments ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"comments\" rows={3}></textarea>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button type=\"submit\" className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nconst BloodTestCreate = () => {\r\n     const [patients, setPatients] = useState([] as Person[]);\r\n     const [doctors, setDoctors] = useState([] as Person[]);\r\n     const [bloodGroups, setBloodGroups] = useState([] as BloodGroup[]);\r\n\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons/personType=Patient', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodGroup = await BaseService.getAll<BloodGroup>('/BloodGroup', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data && \r\n            resultDoctors.ok && resultDoctors.data && \r\n            resultBloodGroup.ok && resultBloodGroup.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodGroups(resultBloodGroup.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodGroup.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        // todo: update form value\r\n        console.log(target);\r\n\r\n        if (target.id === 'doctor') {\r\n            setFormValues({ ...formValues, doctorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'donor') {\r\n            setFormValues({ ...formValues, donorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'bloodGroup') {\r\n            setFormValues({ ...formValues, bloodGroupId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'allowed') {\r\n            setFormValues({ ...formValues, allowed: (target as HTMLInputElement).checked });\r\n            return;\r\n        }\r\n        if (target.id === 'comments') {\r\n            setFormValues({ ...formValues, comments: target.value });\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n            <>\r\n                <h1>Create</h1>\r\n                <h4>Blood test</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                    <FormView values={formValues} handleChange={handleChange} />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default BloodTestCreate;","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst RowDisplay = (props: { bloodDonate: BloodDonate }) => (\r\n    <>\r\n        <td>{props.bloodDonate.bloodGroup!.bloodGroupValue}</td>\r\n        <td>{props.bloodDonate.amount}</td>\r\n        <td>{props.bloodDonate.donor!.fullName}</td>\r\n        <td>{props.bloodDonate.doctor!.fullName}</td>\r\n        <td>{props.bloodDonate.createAt}</td>\r\n        <td>\r\n            <Link to={'/BloodDonate/' + props.bloodDonate.id}>Details</Link>\r\n        </td>\r\n    </>\r\n);\r\n\r\nconst BloodDonateIndex = () => {\r\n    const [contactTypes, setBloodTests] = useState([] as BloodDonate[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<BloodDonate>('/BloodDonate', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTests(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood donations</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Blood group</th>\r\n                        <th>Amount</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {contactTypes.map(bloodDonate =>\r\n                        <tr key={bloodDonate.id.toString()}>\r\n                            <RowDisplay bloodDonate={bloodDonate} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodDonateIndex;","import { isEmptyObject } from \"jquery\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst BloodDonateDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const [bloodDonate, setBloodTest] = useState({ bloodDonate: {} });\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<BloodDonate>('/BloodDonate/' + id, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTest({ bloodDonate: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const Info = (props: { bloodDonate: {} }) => {\r\n        if (!isEmptyObject(props.bloodDonate)) {\r\n            const _bloodDonate = props.bloodDonate as BloodDonate\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood donation</h4>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Blood group\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.bloodGroup!.bloodGroupValue}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Amount\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.amount}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Donor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.donor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Doctor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.doctor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Expire date\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                { _bloodDonate.expireDate }\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Created by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.createdBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.createAt}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Update by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.updateBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Updated at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.updatedAt}\r\n                            </dd>\r\n                        </dl>\r\n                    </div>\r\n                    <div>\r\n                        <Link className=\"nav-link text-dark\" to=\"/BloodDonate/\">to list</Link>\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodDonate} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodDonateDetails;","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst initialFormValues: BloodDonate = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodTestId: \"\",\r\n    blootest: null,\r\n    bloodGroupId: \"00000000-0000-0000-0000-000000000000\",\r\n    bloodGroup: null,\r\n    amount: 0,\r\n    available: false,\r\n    expireDate: \"0001-01-01T00:00:00\",\r\n};\r\n\r\nexport interface IFormProps {\r\n    values: BloodDonate;\r\n\r\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\r\n}\r\n\r\nconst FormView = (props: IFormProps) => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Donor</label>\r\n                <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Doctor</label>\r\n                <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Blood test</label>\r\n                <select value={props.values.bloodTestId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodTest\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group col-3\">\r\n                <label className=\"control-label\">Amount</label>\r\n                <input value={props.values.amount ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button type=\"submit\" className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nconst BloodDonateCreate = () => {\r\n     const [patients, setPatients] = useState([] as Person[]);\r\n     const [doctors, setDoctors] = useState([] as Person[]);\r\n     const [bloodGroups, setBloodTests] = useState([] as BloodTest[]);\r\n\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons/personType=Patient', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodTests = await BaseService.getAll<BloodTest>('/BloodTest', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data && \r\n            resultDoctors.ok && resultDoctors.data && \r\n            resultBloodTests.ok && resultBloodTests.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodTests(resultBloodTests.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodTests.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        // todo: update form value\r\n        console.log(target);\r\n\r\n        if (target.id === 'doctor') {\r\n            setFormValues({ ...formValues, doctorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'donor') {\r\n            setFormValues({ ...formValues, donorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'bloodTest') {\r\n            setFormValues({ ...formValues, bloodGroupId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'amount') {\r\n            setFormValues({ ...formValues, amount: parseInt(target.value) });\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n            <>\r\n                <h1>Create</h1>\r\n                <h4>Blood donate</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <FormView values={formValues} handleChange={handleChange} />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default BloodDonateCreate;","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst RowDisplay = (props: { bloodTransfusion: BloodTransfusion }) => (\r\n    <>\r\n        <td>{props.bloodTransfusion.amount}</td>\r\n        <td>{props.bloodTransfusion.bloodGroup!.bloodGroupValue}</td>\r\n        <td>{props.bloodTransfusion.donor!.fullName}</td>\r\n        <td>{props.bloodTransfusion.doctor!.fullName}</td>\r\n        <td>{props.bloodTransfusion.createAt}</td>\r\n        <td>\r\n            <Link to={'/BloodTransfusion/' + props.bloodTransfusion.id}>Details</Link>\r\n        </td>\r\n    </>\r\n);\r\n\r\nconst BloodTransfusionIndex = () => {\r\n    const [contactTypes, setBloodTests] = useState([] as BloodTransfusion[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<BloodTransfusion>('/BloodTransfusion', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTests(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood tests</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Amount</th>\r\n                        <th>Blood group</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {contactTypes.map(bloodTransfusion =>\r\n                        <tr key={bloodTransfusion.id.toString()}>\r\n                            <RowDisplay bloodTransfusion={bloodTransfusion} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTransfusionIndex;","import { isEmptyObject } from \"jquery\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst BloodTransfusionDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const [bloodTransfusion, setBloodTest] = useState({ bloodTransfusion: {} });\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<BloodTransfusion>('/BloodTransfusion/' + id, appState.token!);\r\n\r\n        console.log(result);\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTest({ bloodTransfusion: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const Info = (props: { bloodTransfusion: {} }) => {\r\n        if (!isEmptyObject(props.bloodTransfusion)) {\r\n            console.log(props.bloodTransfusion);\r\n\r\n            const _bloodTransfusion = (props.bloodTransfusion as BloodTransfusion)\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood transfusion</h4>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Amount\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.amount}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Blood group\r\n                                </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.bloodGroup!.bloodGroupValue}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Donor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.donor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Doctor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.doctor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Comments\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.comments}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Created by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.createdBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.createAt}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Update by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.updateBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Updated at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.updatedAt}\r\n                            </dd>\r\n                        </dl>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <Link className=\"nav-link text-dark\" to=\"/BloodTransfusion/\">to list</Link>\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodTransfusion} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTransfusionDetails;","import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodGroup } from \"../../dto/BloodGroup\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst initialFormValues: BloodTransfusion = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    amount: 0,\r\n    commentsId: \"00000000-0000-0000-0000-000000000000\",\r\n    comments: \"\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodGroupId: \"\",\r\n    bloodGroup: null\r\n};\r\n\r\nexport interface IFormProps {\r\n    values: BloodTransfusion;\r\n\r\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\r\n}\r\n\r\nconst FormView = (props: IFormProps) => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group col-3\">\r\n                <label className=\"control-label\">Amount</label>\r\n                <input value={props.values.amount ?? 0} onChange={(e) => props.handleChange(e.target)} type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Donor</label>\r\n                <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Doctor</label>\r\n                <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Blood group</label>\r\n                <select value={props.values.bloodGroupId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodGroup\">\r\n                    <option></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"formTextArea\">Comments</label>\r\n                <textarea value={props.values.comments ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"comments\" rows={3}></textarea>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button type=\"submit\" className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nconst BloodTransfusionCreate = () => {\r\n     const [patients, setPatients] = useState([] as Person[]);\r\n     const [doctors, setDoctors] = useState([] as Person[]);\r\n     const [bloodGroups, setBloodGroups] = useState([] as BloodGroup[]);\r\n\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons/personType=Patient', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodGroup = await BaseService.getAll<BloodGroup>('/BloodGroup', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data && \r\n            resultDoctors.ok && resultDoctors.data && \r\n            resultBloodGroup.ok && resultBloodGroup.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodGroups(resultBloodGroup.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodGroup.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        console.log(target);\r\n\r\n        if (target.id === 'amount') {\r\n            setFormValues({ ...formValues, amount: parseInt(target.value) });\r\n            return;\r\n        }\r\n        if (target.id === 'doctor') {\r\n            setFormValues({ ...formValues, doctorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'donor') {\r\n            setFormValues({ ...formValues, donorId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'bloodGroup') {\r\n            setFormValues({ ...formValues, bloodGroupId: target.value });\r\n            return;\r\n        }\r\n        if (target.id === 'comments') {\r\n            setFormValues({ ...formValues, comments: target.value });\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n            <>\r\n                <h1>Create</h1>\r\n                <h4>Blood transfusion</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <FormView values={formValues} handleChange={handleChange} />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default BloodTransfusionCreate;","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport LoginLayout from './LoginLayout'\nimport MainLayout from './MainLayout'\n\n// views\nimport Home from './containers/home/HomeIndex'\nimport Login from './containers/identity/Login'\nimport { AppContextProvider, initialAppState } from './context/AppContext'\nimport { useState } from 'react'\nimport BloodTestIndex from './containers/bloodTest/Index'\nimport BloodTestDetails from './containers/bloodTest/Details'\nimport BloodTestCreate from './containers/bloodTest/Create'\nimport BloodDonateIndex from './containers/bloodDonate/Index'\nimport BloodDonateDetails from './containers/bloodDonate/Details'\nimport BloodDonateCreate from './containers/bloodDonate/Create'\nimport BloodTransfusionIndex from './containers/bloodTransfusion/Index'\nimport BloodTransfusionDetails from './containers/bloodTransfusion/Details'\nimport BloodTransfusionCreate from './containers/bloodTransfusion/Create'\n\n\nexport default () => {\n    const setAuthInfo = (token: string | null, firstName: string, lastName: string): void => {\n        setAppState({ ...appState, token, firstName, lastName });\n    }\n\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo });\n\n    return (\n        <>\n        <AppContextProvider value={appState} >\n            <Router>\n                <Switch>\n\n                    <Route path='/Identity' >\n                        <LoginLayout>\n                            <Switch>\n                                <Route path='/Identity/Login' component={Login} />\n                            </Switch>\n                        </LoginLayout>\n                    </Route>\n\n                    <Route>\n                        <MainLayout>\n                            <Switch>\n                                <Route path='/' exact component={Home} />\n                                <Route path='/BloodTest' exact component={BloodTestIndex} />\n                                <Route path='/BloodTest/Create' exact component={BloodTestCreate} />\n                                <Route path='/BloodTest/:id' exact component={BloodTestDetails} />\n                                <Route path='/BloodDonate' exact component={BloodDonateIndex} />\n                                <Route path='/BloodDonate/Create' exact component={BloodDonateCreate} />\n                                <Route path='/BloodDonate/:id' exact component={BloodDonateDetails} />\n                                <Route path='/BloodTransfusion' exact component={BloodTransfusionIndex} />\n                                <Route path='/BloodTransfusion/Create' exact component={BloodTransfusionCreate} />\n                                <Route path='/BloodTransfusion/:id' exact component={BloodTransfusionDetails} />\n                            </Switch>\n                        </MainLayout>\n                    </Route>\n\n                </Switch>\n            </Router>\n        </AppContextProvider>\n        </>\n    )\n\n}","import 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n// import './assets/all.min.css';\nimport './assets/sb-admin-2.min.css';\nimport './assets/site.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}