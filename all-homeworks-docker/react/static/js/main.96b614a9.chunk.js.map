{"version":3,"sources":["components/Alert.tsx","context/AppContext.ts","LoginLayout.tsx","components/Footer.tsx","components/Header.tsx","components/Sidebar.tsx","MainLayout.tsx","containers/home/HomeIndex.tsx","configuration.tsx","services/identity-service.ts","containers/identity/Login.tsx","types/EPageStatus.ts","containers/identity/Register.tsx","components/Loader.tsx","services/base-service.ts","containers/identity/Profile.tsx","components/Privacy.tsx","containers/bloodTest/Index.tsx","containers/bloodTest/Details.tsx","containers/bloodTest/Create.tsx","containers/bloodDonate/Index.tsx","containers/bloodDonate/Details.tsx","containers/bloodDonate/Create.tsx","containers/bloodTransfusion/Index.tsx","containers/bloodTransfusion/Details.tsx","containers/bloodTransfusion/Create.tsx","containers/person/Index.tsx","containers/person/Details.tsx","containers/person/Create.tsx","containers/contact/Index.tsx","containers/statistics/BloodDonate.tsx","containers/statistics/BloodTransfusion.tsx","containers/statistics/General.tsx","App.tsx","index.tsx"],"names":["EAlertClass","initialAppState","token","firstName","lastName","setAuthInfo","clearAuthInfo","appState","AppContext","React","createContext","AppContextProvider","Provider","Consumer","LoginLayout","children","useContext","className","type","to","role","Footer","Header","useState","submit","setSubmit","data-toggle","data-target","aria-controls","aria-expanded","aria-label","title","onClick","e","uri","preventDefault","logOutClicked","nativeEvent","Sidebar","id","xmlns","width","height","fill","viewBox","fillRule","d","aria-labelledby","data-parent","MainLayout","HomeIndex","Alert","props","show","alertClass","message","ApiBaseUrl","IdentityService","apiEndpoint","loginData","loginDataJson","JSON","stringify","this","axios","post","response","ok","status","statusCode","data","error","messages","toString","registerData","Axios","create","baseURL","headers","EPageStatus","Login","email","password","setLoginData","alertMessage","setAlertMessage","logInClicked","a","firstname","lastname","Danger","htmlFor","value","onChange","target","name","placeholder","autoComplete","Register","validationTemplate","confirmPassword","setFormValues","handleValidation","formIsValid","test","prevState","registerClicked","registerDTO","handleChange","onSubmit","asp-for","maxLength","Loader","pageStatus","Loading","Error","BaseService","jwt","Authorization","get","getAxiosConfiguration","dto","delete","Profile","userInfo","setUserInfo","setPageStatus","loadData","result","OK","useEffect","Info","isEmptyObject","_userInfo","dateFormat","require","userName","phoneNumber","dob","emailConfirmed","twoFactorEnabled","Privacy","RowDisplay","bloodTest","allowed","donor","fullName","doctor","createAt","BloodTestIndex","personId","useParams","bloodTests","setBloodTests","getAll","map","BloodTestDetails","setBloodTest","_bloodTest","v-if","bloodGroup","bloodGroupValue","donorId","comments","createdBy","updateBy","updatedAt","initialFormValues","doctorId","bloodGroupId","overviewData","FormView","patients","setPatients","doctors","setDoctors","bloodGroups","setBloodGroups","resultPatients","resultDoctors","resultBloodGroup","values","createSubmit","patient","checked","rows","BloodTestCreate","formValues","bloodDonate","amount","BloodDonateIndex","bloodDonates","setBloodDonates","BloodDonateDetails","_bloodDonate","expireDate","bloodTestId","blootest","available","resultBloodTests","step","BloodDonateCreate","bloodTransfusion","BloodTransfusionIndex","contactTypes","BloodTransfusionDetails","setBloodTransfusion","transferableBlood","setTransferableBlood","BloTraresult","TraBloresult","bloodDonateId","_bloodTransfusion","commentsId","BloodTransfusionCreate","identificationCode","persons","setPersons","person","asp-action","method","PersonIndex","PersonDetails","setPerson","perBloDonInf","setPersonBloodDonateInfo","perResult","bloInfResult","_person","_perBloDonInf","personType","personTypeValue","date","aria-haspopup","personTypeId","personTypes","setPersonTypes","resultPersonType","PersonCreate","contactValue","contactTypeId","contactType","ContactIndex","contacts","setContacts","setContactTypes","personResponse","contactTypeResponse","contactResponse","length","newContacts","concat","deleteSubmit","filter","item","editSubmit","contact","PersonInfo","contactTypeValue","BloodDonateStatistics","statistics","setStatistics","_statistics","chartType","loader","parse","options","titleTextStyle","fontSize","pieSliceText","backgroundColor","pieHole","BloodTransfusionStatistics","GeneralStatistics","hAxis","color","vAxis","minValue","App","setAppState","path","exact","component","Home","ReactDOM","render","basename","process","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96b614a9.chunk.js","sourcesContent":["export enum EAlertClass {\n    Primary = 'alert-primary',\n    Secondary = 'alert-secondary',\n    Success = 'alert-success',\n    Danger = 'alert-danger',\n    Warning = 'alert-warning',\n    Info = 'alert-info',\n    Light = 'alert-light',\n    Dark = 'alert-dark',\n}\n\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\n    \n    return props.show ? <div className={'alert ' + props.alertClass + ' mt-2'} role=\"alert\">{props.message}</div> : null;\n}\n\nexport default Alert;","import React from \"react\";\n\nexport interface IAppState {\n    token: string | null;\n    firstName: string;\n    lastName: string;\n    setAuthInfo: (token: string | null, firstName: string, lastName: string) => void;\n    clearAuthInfo: (appState: IAppState) => void;\n}\n\nexport const initialAppState : IAppState = {\n    token: null,\n    firstName: '',\n    lastName: '',\n    setAuthInfo: (token: string | null, firstName: string, lastName: string): void => {},\n    clearAuthInfo: (appState: IAppState): void => {\n        appState.token = null;\n        appState.firstName = '';\n        appState.lastName = '';\n    }\n}\n\nexport const AppContext = React.createContext<IAppState>(initialAppState);\nexport const AppContextProvider = AppContext.Provider;\nexport const AppContextConsumer = AppContext.Consumer;\n","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"./context/AppContext\";\r\n\r\nconst LoginLayout = ( {children}: any ) => {\r\n    const appState = useContext(AppContext);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n\r\n            <div className=\"row justify-content-center\">\r\n\r\n                <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n\r\n                    <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                        <div className=\"card-body p-0\">\r\n\r\n                            {appState.token != null ?\r\n                                <div className=\"container mt-2\">\r\n                                    <Link type=\"button\" className=\"btn btn-primary\" to=\"/\">Home</Link>\r\n                                </div>\r\n                                :\r\n                                <></>\r\n                            }\r\n\r\n                            <div className=\"container m-auto\">\r\n                                <main role=\"main\" className=\"pb-3\">\r\n                                    {children}\r\n                                </main>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginLayout;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = () => (\r\n    <footer className=\"footer bg-dark text-center text-lg-start text-light\">\r\n        <div className=\"container\">\r\n            &copy; 2021 - Bloody -\r\n            <Link className=\"text-info\" to=\"/Privacy\"> Privacy</Link>\r\n        </div>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import { useContext, useState } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    const appState = useContext(AppContext);\r\n    const [submit, setSubmit] = useState(\"\");\r\n\r\n    const logOutClicked = (e: Event, uri: string) => {\r\n        e.preventDefault();\r\n        appState.clearAuthInfo(appState);\r\n        setSubmit(uri);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            { submit !== \"\" ? <Redirect to={submit} /> : null}\r\n            <header className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"navbar-collapse collapse d-flex justify-content-end\">\r\n                    <ul className=\"navbar-nav float-right\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/Identity/Profile\" className=\"nav-link btn btn-link text-dark\" title=\"Manage\">\r\n                                Hello! {appState.firstName} {appState.lastName}\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button onClick={(e) => logOutClicked(e.nativeEvent, \"/Identity/Login\")} className=\"nav-link btn btn-link text-dark\">Logout</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </header>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","import { NavLink } from \"react-router-dom\";\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <ul className=\"navbar-nav bg-gradient-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\">\r\n            <NavLink className=\"sidebar-brand d-flex align-items-center justify-content-center\" to=\"/\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" className=\"bi bi-droplet-fill\" viewBox=\"0 0 16 16\">\r\n                    <path fillRule=\"evenodd\" d=\"M8 16a6 6 0 0 0 6-6c0-1.655-1.122-2.904-2.432-4.362C10.254 4.176 8.75 2.503 8 0c0 0-6 5.686-6 10a6 6 0 0 0 6 6zM6.646 4.646c-.376.377-1.272 1.489-2.093 3.13l.894.448c.78-1.559 1.616-2.58 1.907-2.87l-.708-.708z\" />\r\n                </svg>\r\n                <div className=\"sidebar-brand-text mx-3\">Blood Center</div>\r\n            </NavLink>\r\n\r\n            <hr className=\"sidebar-divider\" />\r\n\r\n            <div className=\"sidebar-heading\">\r\n                General\r\n            </div>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#statistics\"\r\n                    aria-expanded=\"true\" aria-controls=\"statistics\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Statistics</span>\r\n                </NavLink>\r\n                <div id=\"statistics\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <NavLink className=\"collapse-item\" to=\"/Statistics/General\" >General</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/Statistics/BloodDonate\" >Blood donations</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/Statistics/BloodTransfusion\" >Blood transfusions</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseOne\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Persons</span>\r\n                </NavLink>\r\n                <div id=\"collapseOne\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/Person\">Persons</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/Person/Create\">Register</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <hr className=\"sidebar-divider\" />\r\n\r\n            <div className=\"sidebar-heading\">\r\n                Activities\r\n            </div>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseTwo\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseTwo\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Blood testing</span>\r\n                </NavLink>\r\n                <div id=\"collapseTwo\" className=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTest\">Tests</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTest/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseThree\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseThree\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Blood donation</span>\r\n                </NavLink>\r\n                <div id=\"collapseThree\" className=\"collapse\" aria-labelledby=\"headingThree\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodDonate\">Donations</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodDonate/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link collapsed\" to=\"#\" data-toggle=\"collapse\" data-target=\"#collapseFore\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseThree\">\r\n                    <i className=\"fas fa-fw fa-cog\"></i>\r\n                    <span>Blood transfusion</span>\r\n                </NavLink>\r\n                <div id=\"collapseFore\" className=\"collapse\" aria-labelledby=\"headingFore\" data-parent=\"#accordionSidebar\">\r\n                    <div className=\"bg-white py-2 collapse-inner rounded\">\r\n                        <h6 className=\"collapse-header\">Activities:</h6>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTransfusion\">BloodTransfusions</NavLink>\r\n                        <NavLink className=\"collapse-item\" to=\"/BloodTransfusion/Create\">Create</NavLink>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import Footer from './components/Footer';\r\nimport Header from './components/Header';\r\nimport Sidebar from './components/Sidebar';\r\n\r\nconst MainLayout = ({children}: any) => {\r\n    return (\r\n        <div id=\"wrapper\">\r\n\r\n            <Sidebar />\r\n\r\n            <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n\r\n                <Header />\r\n\r\n                <div className=\"container-fluid\">\r\n                    <div id=\"content\">\r\n                        <div className=\"container\">\r\n                            <main role=\"main\" className=\"pb-3\">\r\n                                {children}\r\n                            </main>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Footer />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MainLayout;\r\n","import { Redirect } from \"react-router-dom\";\r\n\r\nconst HomeIndex = () => {\r\n    return (\r\n        <Redirect to=\"/Person\" />\r\n    );\r\n}\r\n\r\nexport default HomeIndex;","export const ApiBaseUrl = \"http://blooddonate.azurewebsites.net/api/v1/\";\r\n//https://localhost:8888/api/v1/\r\n//http://blooddonate.azurewebsites.net/api/v1/\r\n//http://localhost:8080/api/v1/\r\n//https://localhost:5051/api/v1/\r\n","import { ILoginResponse } from './../types/ILoginResponse';\nimport Axios, { AxiosError } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class IdentityService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    static async Login(apiEndpoint: string, loginData: {email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(loginData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages.toString()\n            }\n        }\n\n    }\n\n    static async Register(apiEndpoint: string, registerData: {email: string, password: string, firstname: string, lastname: string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(registerData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages.toString()\n            }\n        }\n\n    }\n\n}","import { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Login = () => {\n    const appState = useContext(AppContext);\n\n    const [loginData, setLoginData] = useState({ email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const logInClicked = async (e: Event) => {\n        e.preventDefault();\n        if (loginData.email === '' || loginData.password === '') {\n            setAlertMessage('Empty email or pawwsord!');\n        };\n\n        let response = await IdentityService.Login('/Account/Login', loginData);\n        if (!response.ok) {\n            setAlertMessage(response.messages!);\n        } else {\n            setAlertMessage('');\n            appState.setAuthInfo(response.data!.token, response.data!.firstname, response.data!.lastname);\n        }\n    }\n\n    return (\n        <>\n            { appState.token !== null ? <Redirect to=\"/\" /> : null}\n            <h1>Log in</h1>\n            <form>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr />\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={loginData.email} onChange={e => setLoginData({ ...loginData, email: e.target.value })} className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\"  autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={loginData.password} onChange={e => setLoginData({ ...loginData, password: e.target.value })} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input your current password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => logInClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Log in</button>\n                                <Link className=\"ml-2\" id=\"register\" to=\"/Identity/Register\">Register new user</Link> \n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n            \n        </>\n    );\n}\n\nexport default Login;","export enum EPageStatus {\n    Loading = \"Loading...\",\n    Error = \"Error...\",\n    OK = \"Ok\",\n}\n","import { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IdentityService } from \"../../services/identity-service\";\r\n\r\nconst Register = () => {\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\"\r\n    }\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [registerData, setFormValues] = useState({\r\n         email: '',\r\n         password: '',\r\n         confirmPassword: '',\r\n         firstname: '',\r\n         lastname: ''});\r\n\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n\r\n    const handleValidation = () => {\r\n        let formIsValid = true;\r\n\r\n        setAlertMessage(validationTemplate);\r\n\r\n        const emailRe = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\],;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\],;:\\s@\"]+\\.)+[^<>()[\\],;:\\s@\"]{2,})$/i;\r\n        if(!emailRe.test(registerData.email)){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                email: \"Email is not valid!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        const passwordRe = /^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{8,}$/i;\r\n        if(!passwordRe.test(registerData.password)) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                password: \"Password requirements: Minimum 8 characters, at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character:\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(registerData.password !== registerData.confirmPassword) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                password: \"Password and confirm password are not the same!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!registerData.firstname) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                firstname: \"Firstname field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!registerData.lastname) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                lastname: \"Lastname field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n       return formIsValid;\r\n   }\r\n\r\n    const registerClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) {\r\n            return;\r\n        };\r\n\r\n        const registerDTO = {\r\n            email: registerData.email,\r\n            password: registerData.password,\r\n            firstname: registerData.firstname,\r\n            lastname: registerData.lastname,\r\n        }\r\n\r\n        let response = await IdentityService.Register('account/register', registerDTO);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                error: response.messages!\r\n            }));\r\n        } else {\r\n            appState.setAuthInfo(response.data!.token, response.data!.firstname, response.data!.lastname);\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'email':\r\n                setFormValues({ ...registerData, email: target.value });\r\n                return\r\n            case 'password':\r\n                setFormValues({ ...registerData, password: target.value });\r\n                return\r\n            case 'confirmPassword':\r\n                setFormValues({ ...registerData, confirmPassword: target.value });\r\n                return\r\n            case 'firstname':\r\n                setFormValues({ ...registerData, firstname: target.value });\r\n                return\r\n            case 'lastname':\r\n                setFormValues({ ...registerData, lastname: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { appState.token !== null ? <Redirect to=\"/\" /> : null}\r\n            <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <form onSubmit={(e) => registerClicked(e.nativeEvent)}>\r\n                        <h4>Create new account</h4>\r\n                        <hr />\r\n                        <div className=\"form-group\">\r\n                            <label asp-for=\"Input.Email\">Email</label>\r\n                            <input value={registerData.email} onChange={(e) => handleChange(e.target)} maxLength={100} className=\"form-control\" id=\"email\"/>\r\n                            <Alert show={alertMessage.email !== ''} message={alertMessage.email} alertClass={EAlertClass.Danger} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label asp-for=\"Input.Password\">Password</label>\r\n                            <input value={registerData.password} onChange={(e) => handleChange(e.target)} maxLength={100} className=\"form-control\" type=\"password\" id=\"password\"/>\r\n                            <Alert show={alertMessage.password !== ''} message={alertMessage.password} alertClass={EAlertClass.Danger} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label asp-for=\"Input.ConfirmPassword\">Confirme password</label>\r\n                            <input value={registerData.confirmPassword} onChange={(e) => handleChange(e.target)} maxLength={100} className=\"form-control\" type=\"password\" id=\"confirmPassword\"/>\r\n                            <Alert show={alertMessage.confirmPassword !== ''} message={alertMessage.confirmPassword} alertClass={EAlertClass.Danger} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label asp-for=\"Input.FirstName\">Firstname</label>\r\n                            <input value={registerData.firstname} onChange={(e) => handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"firstname\"/>\r\n                            <Alert show={alertMessage.firstname !== ''} message={alertMessage.firstname} alertClass={EAlertClass.Danger} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label asp-for=\"Input.LastName\">Lastname</label>\r\n                            <input value={registerData.lastname} onChange={(e) => handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"lastname\"/>\r\n                            <Alert show={alertMessage.lastname !== ''} message={alertMessage.lastname} alertClass={EAlertClass.Danger} />\r\n                        </div>\r\n                        <button onClick={(e) => registerClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n                        <Link className=\"ml-2\" to=\"/Identity/Login\">Back to login</Link>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;","import { EPageStatus } from \"../types/EPageStatus\";\n\nconst Loader = (props: {pageStatus:EPageStatus, statusCode:  number}) => {\n    if (props.pageStatus === EPageStatus.Loading){\n        return <div className=\"alert alert-primary\" role=\"alert\">Loading...</div>;\n    }\n    if (props.pageStatus === EPageStatus.Error) {\n        return <div className=\"alert alert-danger\" role=\"alert\">Error... {props.statusCode}</div>\n    }\n    return <></>;\n}\n\nexport default Loader;","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\n\nexport abstract class BaseService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\n        if (!jwt) return undefined;\n        const config: AxiosRequestConfig = {\n            headers: {\n                Authorization: 'Bearer ' + jwt\n            }\n        };  \n        return config;      \n    }\n\n    static async getAll<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> {\n        try {\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: error.response!.data.title\n            }\n        }\n\n    }\n\n    static async get<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        try {\n            let response = await this.axios.get<TEntity>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: error.response!.data.title\n            }\n        }\n    }\n\n    static async post<TEntity>(apiEndpoint: string, dto: TEntity, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        try {\n            let response = await this.axios.post<TEntity>(apiEndpoint, dto, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: typeof(error.response!.data) === 'string' ? error.response!.data : error.response!.data.title\n            }\n        }\n    }\n\n    \n    static async delete<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        try {\n            let response = await this.axios.delete(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: typeof(error.response!.data) === 'string' ? error.response!.data : error.response!.data.title\n            }\n        }\n    }\n\n}","import { isEmptyObject } from \"jquery\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAppUser } from \"../../dto/IAppUser\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\nconst Profile = () => {\r\n    const appState = useContext(AppContext);\r\n    const [userInfo, setUserInfo] = useState({ userInfo: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<IAppUser>('Account/GetAppUserInfo', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setUserInfo({ userInfo: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const Info = (props: { userInfo: {} }) => {\r\n        if (!isEmptyObject(props.userInfo)) {\r\n            const _userInfo = (props.userInfo as IAppUser)\r\n            var dateFormat = require(\"dateformat\");\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Firstname\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.firstName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Lastname\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.lastName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                User name\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.userName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Email\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.email}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Phone\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.phoneNumber ?? \"-\"}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_userInfo.dob, \"isoDate\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Email confirmed\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.emailConfirmed ? \"✔\" : \"❌\"}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Two factor authentication enabled\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_userInfo.twoFactorEnabled ? \"✔\" : \"❌\"}\r\n                            </dd>\r\n                        </dl>\r\n\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>User info</h2>\r\n\r\n            <Info {...userInfo} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","const Privacy = () => {\r\n    return (\r\n        <h3>Privacy ...</h3>\r\n    );\r\n}\r\n\r\nexport default Privacy;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRoutePersonId } from \"../../types/IRoutePersonId\";\r\n\r\nconst RowDisplay = (props: { bloodTest: BloodTest }) => {\r\n    var dateFormat = require(\"dateformat\");\r\n    return(\r\n    <>\r\n        <td>{props.bloodTest.allowed ? '✔' : '❌'}</td>\r\n        <td>{props.bloodTest.donor!.fullName}</td>\r\n        <td>{props.bloodTest.doctor!.fullName}</td>\r\n        <td>{dateFormat(props.bloodTest.createAt, \"dd/mm/yyyy\")}</td>\r\n        <td>\r\n            <Link to={'/BloodTest/' + props.bloodTest.id}>Details</Link>\r\n        </td>\r\n    </>);\r\n}\r\n\r\n\r\nconst BloodTestIndex = () => {\r\n    const { personId } = useParams() as IRoutePersonId;\r\n    const [bloodTests, setBloodTests] = useState([] as BloodTest[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = (personId == null) \r\n            ? await BaseService.getAll<BloodTest>('BloodTest', appState.token!)\r\n            : await BaseService.getAll<BloodTest>('BloodTest/personId=' + personId, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTests(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood tests</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Allowed</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {bloodTests.map(bloodTest =>\r\n                        <tr key={bloodTest.id.toString()}>\r\n                            <RowDisplay bloodTest={bloodTest} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTestIndex;","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst BloodTestDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n    const [bloodTest, setBloodTest] = useState({ bloodTest: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<BloodTest>('BloodTest/' + id, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTest({ bloodTest: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const Info = (props: { bloodTest: {} }) => {\r\n        if (!isEmptyObject(props.bloodTest)) {\r\n            const _bloodTest = (props.bloodTest as BloodTest)\r\n            var dateFormat = require(\"dateformat\");\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood test</h4>\r\n                        <hr />\r\n                        <div v-if=\"bloodTest != null\" >\r\n                            <dl className=\"row\">\r\n                                <dt className=\"col-sm-2\">\r\n                                    Allowed\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.allowed ? '✔' : '❌'}\r\n                                </dd>\r\n                                 <dt className=\"col-sm-2\">\r\n                                    Blood group\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.bloodGroup!.bloodGroupValue}\r\n                                </dd> \r\n                                <dt className=\"col-sm-2\">\r\n                                    Donor\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    <Link to={\"/Person/\" + _bloodTest.donorId}>{_bloodTest.donor!.fullName}</Link>\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Doctor\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.doctor!.fullName}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Comments\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.comments}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Created by\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.createdBy}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Create at\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {dateFormat(_bloodTest.createAt, \"dd/mm/yyyy HH:MM\")}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Update by\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {_bloodTest.updateBy}\r\n                                </dd>\r\n                                <dt className=\"col-sm-2\">\r\n                                    Updated at\r\n                                </dt>\r\n                                <dd className=\"col-sm-10\">\r\n                                    {dateFormat(_bloodTest.updatedAt, \"dd/mm/yyyy HH:MM\")}\r\n                                </dd>\r\n                            </dl>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <Link className=\"nav-link text-dark\" to=\"/BloodTest\">to list</Link>\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodTest} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTestDetails;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodGroup } from \"../../dto/BloodGroup\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { IFormProps } from \"../../types/IFormProps\";\r\n\r\nconst initialFormValues: BloodTest = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    allowed: false,\r\n    comments: \"\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodGroupId: \"\",\r\n    bloodGroup: null,\r\n    overviewData: \"\"\r\n};\r\n\r\nconst FormView = (props: IFormProps<BloodTest>) => {\r\n    //const { personId, bloodGroupId } = useParams() as { personId: string, bloodGroupId: string };\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        donor: \"\",\r\n        doctor: \"\",\r\n        bloodGroup: \"\",\r\n        comments: \"\"\r\n    }\r\n\r\n    const [patients, setPatients] = useState([] as Person[]);\r\n    const [doctors, setDoctors] = useState([] as Person[]);\r\n    const [bloodGroups, setBloodGroups] = useState([] as BloodGroup[]);\r\n    const [submit, setSubmit] = useState(\"\");\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodGroup = await BaseService.getAll<BloodGroup>('/BloodGroup', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data &&\r\n            resultDoctors.ok && resultDoctors.data &&\r\n            resultBloodGroup.ok && resultBloodGroup.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodGroups(resultBloodGroup.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodGroup.statusCode });\r\n        }\r\n\r\n/*         if (personId && bloodGroupId) {\r\n            setFormValues({ ...formValues, donorId: target.value });\r\n        } */\r\n    }\r\n\r\n    const handleValidation = () => {\r\n        let formIsValid = true;\r\n\r\n        setAlertMessage(validationTemplate);\r\n\r\n        if(!props.values.donorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                donor: \"Donor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.doctorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                doctor: \"Doctor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.bloodGroupId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                bloodGroup: \"blood group field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n       return formIsValid;\r\n   }\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) {\r\n            return;\r\n        }\r\n\r\n        let response = await BaseService.post(\"BloodTest\", props.values, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"error\": response.messages!\r\n            }));\r\n        } else {\r\n            setSubmit(response.data!.id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            {submit !== \"\" ? <Redirect to={'/BloodTest/' + submit} /> : null}\r\n            <form>\r\n                <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Doctor</label>\r\n                    <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                        <option></option>\r\n                        {doctors.map(doctor => {\r\n                            return <option key={doctor.id} value={doctor.id}>{doctor.fullName}</option>\r\n                        })}\r\n                    </select>\r\n                    <Alert show={alertMessage.doctor !== ''} message={alertMessage.doctor} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Donor</label>\r\n                    <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                        <option></option>\r\n                        {patients.map(patient => {\r\n                            return <option key={patient.id} value={patient.id}>{patient.fullName}</option>\r\n                        })}\r\n                    </select>\r\n                    <Alert show={alertMessage.donor !== ''} message={alertMessage.donor} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Blood group</label>\r\n                    <select value={props.values.bloodGroupId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodGroup\">\r\n                        <option></option>\r\n                        {bloodGroups.map(bloodGroup => {\r\n                            return <option key={bloodGroup.id} value={bloodGroup.id}>{bloodGroup.bloodGroupValue}</option>\r\n                        })}\r\n                    </select>\r\n                    <Alert show={alertMessage.bloodGroup !== ''} message={alertMessage.bloodGroup} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-3\">\r\n                    <label className=\"control-label\">Allowed</label>\r\n                    <input checked={props.values.allowed ?? false} onChange={(e) => props.handleChange(e.target)} type=\"checkbox\" className=\"form-control\" id=\"allowed\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"formTextArea\">Comments</label>\r\n                    <textarea value={props.values.comments ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={1024} className=\"form-control\" id=\"comments\" rows={3}></textarea>\r\n                    <Alert show={alertMessage.comments !== ''} message={alertMessage.comments} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary\">Create</button>\r\n                </div>\r\n            </form>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst BloodTestCreate = () => {\r\n    const { personId, bloodGroupId } = useParams() as { personId: string, bloodGroupId: string };\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    useEffect(() => {\r\n        if (personId && bloodGroupId) {\r\n            setFormValues({ ...formValues, donorId: personId, bloodGroupId: bloodGroupId});\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'doctor':\r\n                setFormValues({ ...formValues, doctorId: target.value });\r\n                return\r\n            case 'donor':\r\n                setFormValues({ ...formValues, donorId: target.value });\r\n                return\r\n            case 'bloodGroup':\r\n                setFormValues({ ...formValues, bloodGroupId: target.value });\r\n                return\r\n            case 'allowed':\r\n                setFormValues({ ...formValues, allowed: (target as HTMLInputElement).checked });\r\n                return\r\n            case 'comments':\r\n                setFormValues({ ...formValues, comments: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create</h1>\r\n            <h4>Blood test</h4>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <FormView values={formValues} handleChange={handleChange} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default BloodTestCreate;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRoutePersonId } from \"../../types/IRoutePersonId\";\r\n\r\nconst RowDisplay = (props: { bloodDonate: BloodDonate }) => {\r\n    var dateFormat = require(\"dateformat\");\r\n    return (\r\n    <>\r\n        <td>{props.bloodDonate.bloodGroup!.bloodGroupValue}</td>\r\n        <td>{props.bloodDonate.amount}</td>\r\n        <td>{props.bloodDonate.donor!.fullName}</td>\r\n        <td>{props.bloodDonate.doctor!.fullName}</td>\r\n        <td>{dateFormat(props.bloodDonate.createAt, \"dd/mm/yyyy\")}</td>\r\n        <td>\r\n            <Link to={'/BloodDonate/' + props.bloodDonate.id}>Details</Link>\r\n        </td>\r\n    </>);\r\n} \r\n\r\nconst BloodDonateIndex = () => {\r\n    const { personId } = useParams() as IRoutePersonId;\r\n    const [bloodDonates, setBloodDonates] = useState([] as BloodDonate[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = (personId == null) \r\n            ? await BaseService.getAll<BloodDonate>('BloodDonate', appState.token!)\r\n            : await BaseService.getAll<BloodDonate>('BloodDonate/personId=' + personId, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodDonates(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood donations</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Blood group</th>\r\n                        <th>Amount</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {bloodDonates.map(bloodDonate =>\r\n                        <tr key={bloodDonate.id.toString()}>\r\n                            <RowDisplay bloodDonate={bloodDonate} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodDonateIndex;","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\nconst BloodDonateDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n    const [bloodDonate, setBloodTest] = useState({ bloodDonate: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<BloodDonate>('/BloodDonate/' + id, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTest({ bloodDonate: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const Info = (props: { bloodDonate: {} }) => {\r\n        if (!isEmptyObject(props.bloodDonate)) {\r\n            const _bloodDonate = props.bloodDonate as BloodDonate;\r\n            var dateFormat = require(\"dateformat\");\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood donation</h4>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Blood group\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.bloodGroup!.bloodGroupValue}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Amount\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.amount}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Donor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                <Link to={\"/Person/\" + _bloodDonate.donorId}>{_bloodDonate.donor!.fullName}</Link>\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Doctor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.doctor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Expire date\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_bloodDonate.expireDate, \"mediumDate\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Created by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.createdBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_bloodDonate.createAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Update by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodDonate.updateBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Updated at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_bloodDonate.updatedAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                        </dl>\r\n                    </div>\r\n                    <div>\r\n                        <Link className=\"nav-link text-dark\" to=\"/BloodDonate\">to list</Link>\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodDonate} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodDonateDetails;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodDonate } from \"../../dto/BloodDonate\";\r\nimport { BloodTest } from \"../../dto/BloodTest\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { IFormProps } from \"../../types/IFormProps\";\r\nimport { IRoutePersonId } from \"../../types/IRoutePersonId\";\r\n\r\nconst initialFormValues: BloodDonate = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodTestId: \"\",\r\n    blootest: null,\r\n    bloodGroupId: \"00000000-0000-0000-0000-000000000000\",\r\n    bloodGroup: null,\r\n    amount: \"\",\r\n    available: true,\r\n    expireDate: \"0001-01-01T00:00:00\",\r\n};\r\n\r\nconst FormView = (props: IFormProps<BloodDonate>) => {\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        amount: \"\",\r\n        donor: \"\",\r\n        doctor: \"\",\r\n        bloodTest: \"\"\r\n    }\r\n\r\n    const [patients, setPatients] = useState([] as Person[]);\r\n    const [doctors, setDoctors] = useState([] as Person[]);\r\n    const [bloodTests, setBloodTests] = useState([] as BloodTest[]);\r\n    const [submit, setSubmit] = useState(\"\");\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodTests = await BaseService.getAll<BloodTest>('/BloodTest/minimum', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data &&\r\n            resultDoctors.ok && resultDoctors.data &&\r\n            resultBloodTests.ok && resultBloodTests.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodTests(resultBloodTests.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodTests.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleValidation = () => {\r\n        let formIsValid = true;\r\n\r\n        setAlertMessage(validationTemplate);\r\n\r\n        if(!props.values.amount){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                amount: \"Amount can not be 0!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.donorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                donor: \"Donor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.doctorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                doctor: \"Doctor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.bloodTestId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                bloodTest: \"bloodTest field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n       return formIsValid;\r\n   }\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) {\r\n            return;\r\n        }\r\n\r\n        let response = await BaseService.post(\"BloodDonate\", props.values, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                error: response.messages!\r\n            }));\r\n\r\n        } else {\r\n            setSubmit(response.data!.id);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { submit !== \"\" ? <Redirect to={'/BloodDonate/' + submit} /> : null}\r\n        <form>\r\n            <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Donor</label>\r\n                <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                    <option></option>\r\n                    {patients.map(patient => {\r\n                        return <option key={patient.id} value={patient.id}>{patient.fullName}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.donor !== ''} message={alertMessage.donor} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Doctor</label>\r\n                <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                    <option></option>\r\n                    {doctors.map(doctor => {\r\n                        return <option key={doctor.id} value={doctor.id}>{doctor.fullName}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.doctor !== ''} message={alertMessage.doctor} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Blood test</label>\r\n                <select value={props.values.bloodTestId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodTest\">\r\n                    <option></option>\r\n                    {bloodTests.map(bloodTest => {\r\n                        return <option key={bloodTest.id} value={bloodTest.id}>{bloodTest.overviewData}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.bloodTest !== ''} message={alertMessage.bloodTest} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Amount</label>\r\n                <input value={props.values.amount ?? 0} onChange={(e) => props.handleChange(e.target)} type=\"number\" step=\"0.1\" placeholder=\"0\" className=\"form-control\" id=\"amount\" />\r\n                <Alert show={alertMessage.amount !== ''} message={alertMessage.amount} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n        </form>\r\n        <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst BloodDonateCreate = () => {\r\n    const { personId } = useParams() as IRoutePersonId;\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    useEffect(() => {\r\n        if (personId) {\r\n            setFormValues({ ...formValues, donorId: personId });\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'doctor':\r\n                setFormValues({ ...formValues, doctorId: target.value });\r\n                return;\r\n            case 'donor':\r\n                setFormValues({ ...formValues, donorId: target.value });\r\n                return;\r\n            case 'bloodTest':\r\n                setFormValues({ ...formValues, bloodTestId: target.value });\r\n                return;\r\n            case 'amount':\r\n                setFormValues({ ...formValues, amount: target.value });\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create</h1>\r\n            <h4>Blood donate</h4>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <FormView values={formValues} handleChange={handleChange} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default BloodDonateCreate;","import { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRoutePersonId } from \"../../types/IRoutePersonId\";\r\n\r\nconst RowDisplay = (props: { bloodTransfusion: BloodTransfusion }) => {\r\n    var dateFormat = require(\"dateformat\");\r\n    return (\r\n    <>\r\n        <td>{props.bloodTransfusion.amount}</td>\r\n        <td>{props.bloodTransfusion.bloodGroup!.bloodGroupValue}</td>\r\n        <td>{props.bloodTransfusion.donor!.fullName}</td>\r\n        <td>{props.bloodTransfusion.doctor!.fullName}</td>\r\n        <td>{dateFormat(props.bloodTransfusion.createAt, \"dd/mm/yyyy\")}</td>\r\n        <td>\r\n            <Link to={'/BloodTransfusion/' + props.bloodTransfusion.id}>Details</Link>\r\n        </td>\r\n    </>);\r\n}\r\n\r\n\r\nconst BloodTransfusionIndex = () => {\r\n    const { personId } = useParams() as IRoutePersonId;\r\n    const [contactTypes, setBloodTests] = useState([] as BloodTransfusion[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = (personId == null) \r\n            ? await BaseService.getAll<BloodTransfusion>('BloodTransfusion', appState.token!)\r\n            : await BaseService.getAll<BloodTransfusion>('BloodTransfusion/personId=' + personId, appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTests(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Blood tests</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Amount</th>\r\n                        <th>Blood group</th>\r\n                        <th>Donor</th>\r\n                        <th>Doctor</th>\r\n                        <th>Created at</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {contactTypes.map(bloodTransfusion =>\r\n                        <tr key={bloodTransfusion.id.toString()}>\r\n                            <RowDisplay bloodTransfusion={bloodTransfusion} />\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTransfusionIndex;","import { isEmptyObject } from \"jquery\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { TransferableBlood } from \"../../dto/TransferableBlood\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst BloodTransfusionDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n    const [bloodTransfusion, setBloodTransfusion] = useState({ bloodTransfusion: {} });\r\n    const [transferableBlood, setTransferableBlood] = useState([] as TransferableBlood[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let BloTraresult = await BaseService.get<BloodTransfusion>('BloodTransfusion/' + id, appState.token!);\r\n        let TraBloresult = await BaseService.getAll<TransferableBlood>('TransferableBlood/bloodTransfusionId=' + id, appState.token!);\r\n\r\n        if (BloTraresult.ok && BloTraresult.data &&\r\n            TraBloresult.ok && TraBloresult.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setBloodTransfusion({ bloodTransfusion: BloTraresult.data });\r\n            setTransferableBlood(TraBloresult.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: (!BloTraresult.ok ? BloTraresult: TraBloresult).statusCode });\r\n        }\r\n    }\r\n\r\n    const RowDisplay = (props: { transferableBlood: TransferableBlood }) => (\r\n        <>\r\n            <td>\r\n                <Link to={'/BloodDonate/' + props.transferableBlood.bloodDonateId}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"red\" className=\"bi bi-droplet-fill\" viewBox=\"0 0 16 16\">\r\n                        <path fillRule=\"evenodd\" d=\"M8 16a6 6 0 0 0 6-6c0-1.655-1.122-2.904-2.432-4.362C10.254 4.176 8.75 2.503 8 0c0 0-6 5.686-6 10a6 6 0 0 0 6 6zM6.646 4.646c-.376.377-1.272 1.489-2.093 3.13l.894.448c.78-1.559 1.616-2.58 1.907-2.87l-.708-.708z\" />\r\n                    </svg>\r\n                </Link>\r\n            </td>\r\n            <td>{props.transferableBlood.amount}</td>\r\n            <td>{props.transferableBlood.bloodDonate!.donor!.fullName}</td>\r\n        </>\r\n    );\r\n\r\n    const Info = (props: { bloodTransfusion: {}}) => {\r\n        if (!isEmptyObject(props.bloodTransfusion)) {\r\n            const _bloodTransfusion = (props.bloodTransfusion as BloodTransfusion)\r\n            var dateFormat = require(\"dateformat\");\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Blood transfusion</h4>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Amount\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.amount}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Blood group\r\n                                </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.bloodGroup!.bloodGroupValue}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Donor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                <Link to={\"/Person/\" + _bloodTransfusion.donorId}>{_bloodTransfusion.donor!.fullName}</Link>\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Doctor\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.doctor!.fullName}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Comments\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.comments}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Created by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.createdBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_bloodTransfusion.createAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Update by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_bloodTransfusion.updateBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Updated at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_bloodTransfusion.updatedAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                        </dl>\r\n\r\n                    </div>\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...bloodTransfusion}/>\r\n\r\n            <h2>Blood to use</h2>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Blood</th>\r\n                        <th>Amount</th>\r\n                        <th>Donor fullName</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {transferableBlood.map(transferableBlood =>\r\n                    <tr key={transferableBlood.id} >\r\n                        <RowDisplay transferableBlood={transferableBlood} ></RowDisplay>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n\r\n            <div>\r\n                <Link className=\"nav-link text-dark\" to=\"/BloodTransfusion\">to list</Link>\r\n            </div>\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTransfusionDetails;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodGroup } from \"../../dto/BloodGroup\";\r\nimport { BloodTransfusion } from \"../../dto/BloodTransfusion\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { IFormProps } from \"../../types/IFormProps\";\r\n\r\nconst initialFormValues: BloodTransfusion = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    amount: \"\",\r\n    commentsId: \"00000000-0000-0000-0000-000000000000\",\r\n    comments: \"\",\r\n    donorId: \"\",\r\n    donor: null,\r\n    doctorId: \"\",\r\n    doctor: null,\r\n    bloodGroupId: \"\",\r\n    bloodGroup: null\r\n};\r\n\r\nconst FormView = (props: IFormProps<BloodTransfusion>) => {\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        amount: \"\",\r\n        donor: \"\",\r\n        doctor: \"\",\r\n        bloodGroup: \"\",\r\n        comments: \"\"\r\n    }\r\n\r\n    const [patients, setPatients] = useState([] as Person[]);\r\n    const [doctors, setDoctors] = useState([] as Person[]);\r\n    const [bloodGroups, setBloodGroups] = useState([] as BloodGroup[]);\r\n    const [submit, setSubmit] = useState(\"\");\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPatients = await BaseService.getAll<Person>('/Persons', appState.token!);\r\n        let resultDoctors = await BaseService.getAll<Person>('/Persons/personType=Doctor', appState.token!);\r\n        let resultBloodGroup = await BaseService.getAll<BloodGroup>('/BloodGroup', appState.token!);\r\n\r\n        if (resultPatients.ok && resultPatients.data &&\r\n            resultDoctors.ok && resultDoctors.data &&\r\n            resultBloodGroup.ok && resultBloodGroup.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPatients(resultPatients.data);\r\n            setDoctors(resultDoctors.data);\r\n            setBloodGroups(resultBloodGroup.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: resultBloodGroup.statusCode });\r\n        }\r\n    }\r\n\r\n    const handleValidation = () => {\r\n\r\n        let formIsValid = true;\r\n        \r\n        setAlertMessage(validationTemplate);\r\n\r\n        if(!props.values.amount){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                amount: \"Amount can not be 0!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.donorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                donor: \"Donor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.doctorId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                doctor: \"Doctor field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.bloodGroupId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                bloodGroup: \"blood group field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n       return formIsValid;\r\n   }\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) {\r\n            return;\r\n        }\r\n\r\n        let response = await BaseService.post(\"BloodTransfusion\", props.values, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                    ...prevState,\r\n                    \"error\": response.messages!\r\n            }));\r\n        } else {\r\n            setSubmit(response.data!.id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n        <form>\r\n            { submit !== \"\" ? <Redirect to={'/BloodTransfusion/' + submit} /> : null}\r\n            <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Amount</label>\r\n                <input value={props.values.amount ?? 0} onChange={(e) => props.handleChange(e.target)} type=\"number\" step=\"0.1\" placeholder=\"0\" className=\"form-control\" id=\"amount\" />\r\n                <Alert show={alertMessage.amount !== ''} message={alertMessage.amount} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Donor</label>\r\n                <select value={props.values.donorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"donor\">\r\n                    <option></option>\r\n                    {patients.map(patient => {\r\n                        return <option key={patient.id} value={patient.id}>{patient.fullName}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.donor !== ''} message={alertMessage.donor} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Doctor</label>\r\n                <select value={props.values.doctorId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"doctor\">\r\n                    <option></option>\r\n                    {doctors.map(doctor => {\r\n                        return <option key={doctor.id} value={doctor.id}>{doctor.fullName}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.doctor !== ''} message={alertMessage.doctor} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"control-label\">Blood group</label>\r\n                <select value={props.values.bloodGroupId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodGroup\">\r\n                    <option></option>\r\n                    {bloodGroups.map(bloodGroup => {\r\n                        return <option key={bloodGroup.id} value={bloodGroup.id}>{bloodGroup.bloodGroupValue}</option>\r\n                    })}\r\n                </select>\r\n                <Alert show={alertMessage.bloodGroup !== ''} message={alertMessage.bloodGroup} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"formTextArea\">Comments</label>\r\n                <textarea value={props.values.comments ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={1024} className=\"form-control\" id=\"comments\" rows={3}></textarea>\r\n                <Alert show={alertMessage.comments !== ''} message={alertMessage.comments} alertClass={EAlertClass.Danger} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n        </form>\r\n        <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst BloodTransfusionCreate = () => {\r\n    const { personId, bloodGroupId } = useParams() as { personId: string, bloodGroupId: string };\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    useEffect(() => {\r\n        if (personId && bloodGroupId) {\r\n            setFormValues({ ...formValues, donorId: personId, bloodGroupId: bloodGroupId});\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'amount':\r\n                setFormValues({ ...formValues, amount: target.value });\r\n                return\r\n            case 'doctor':\r\n                setFormValues({ ...formValues, doctorId: target.value });\r\n                return\r\n            case 'donor':\r\n                setFormValues({ ...formValues, donorId: target.value });\r\n                return\r\n            case 'bloodGroup':\r\n                setFormValues({ ...formValues, bloodGroupId: target.value });\r\n                return\r\n            case 'comments':\r\n                setFormValues({ ...formValues, comments: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create</h1>\r\n            <h4>Blood transfusion</h4>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <FormView values={formValues} handleChange={handleChange} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default BloodTransfusionCreate;","import { useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { SearchPerson } from \"../../dto/SearchPerson\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { IFormProps } from \"../../types/IFormProps\";\r\n\r\n\r\nconst initialFormValues: SearchPerson = {\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    identificationCode: \"\",\r\n};\r\n\r\nconst FormView = (props: IFormProps<SearchPerson>) => {\r\n    const [submit, setSubmit] = useState(false);\r\n    const [persons, setPersons] = useState([] as Person[]);\r\n\r\n    const [alertMessage, setAlertMessage] = useState('');\r\n    const appState = useContext(AppContext);\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        const uri = \"Persons/searchperson\" +\r\n            \"?firstname=\" + props.values.firstname +\r\n            \"&lastname=\" + props.values.lastname +\r\n            \"&identificationCode=\" + props.values.identificationCode;\r\n        let response = await BaseService.getAll<Person>(uri, appState.token!);\r\n        if (response.ok && response.data) {\r\n            setAlertMessage('');\r\n            setPersons(response.data);\r\n            setSubmit(true);\r\n        } else {\r\n            setAlertMessage(response.messages!);\r\n        }\r\n    }\r\n\r\n    const RowDisplay = (props: { person: Person }) => (\r\n        <>\r\n            <td>\r\n                <Link to={'/Person/' + props.person.id}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"red\" className=\"bi bi-droplet-fill\" viewBox=\"0 0 16 16\">\r\n                        <path fillRule=\"evenodd\" d=\"M8 16a6 6 0 0 0 6-6c0-1.655-1.122-2.904-2.432-4.362C10.254 4.176 8.75 2.503 8 0c0 0-6 5.686-6 10a6 6 0 0 0 6 6zM6.646 4.646c-.376.377-1.272 1.489-2.093 3.13l.894.448c.78-1.559 1.616-2.58 1.907-2.87l-.708-.708z\" />\r\n                    </svg>\r\n                </Link>\r\n            </td>\r\n            <td>{props.person.firstname}</td>\r\n            <td>{props.person.lastname}</td>\r\n            <td>{props.person.identificationCode}</td>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"small-middle-container\">\r\n                <form asp-action=\"Index\" method=\"get\" id=\"search-form\">\r\n                    <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                    <h3>Search Person</h3>\r\n\r\n                    <div className=\"col\">Firstname</div>\r\n                    <div className=\"col\">\r\n                        <input value={props.values.firstname ?? 0} onChange={(e) => props.handleChange(e.target)} id=\"firstname\" className=\"form-control mb-2 mr-sm-2\" />\r\n                    </div>\r\n\r\n                    <div className=\"col\">Lastname</div>\r\n                    <div className=\"col\">\r\n                        <input value={props.values.lastname ?? 0} onChange={(e) => props.handleChange(e.target)} id=\"lastname\" className=\"form-control mb-2 mr-sm-2\" />\r\n                    </div>\r\n\r\n                    <div className=\"col\">IdentificationCode</div>\r\n                    <div className=\"col\">\r\n                        <input value={props.values.identificationCode ?? 0} onChange={(e) => props.handleChange(e.target)} id=\"identificationCode\" className=\"form-control mb-2 mr-sm-2\" />\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                        <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary mb-2 my-1 mx-2 d-inline\">Search</button>\r\n                        <Link className=\"collapse-item\" to=\"/Person/Create\">Create person</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            { submit ?\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                Profile\r\n                            </th>\r\n                            <th>\r\n                                Firstname\r\n                            </th>\r\n                            <th>\r\n                                Lastname\r\n                            </th>\r\n                            <th>\r\n                                IdentificationCode\r\n                            </th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {persons.map(person =>\r\n                            <tr key={person.id.toString()} className=\"searched-person\">\r\n                                <RowDisplay person={person} ></RowDisplay>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n                : null}\r\n        </>\r\n    );\r\n}\r\n\r\nconst PersonIndex = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'firstname':\r\n                setFormValues({ ...formValues, firstname: target.value });\r\n                return\r\n            case 'lastname':\r\n                setFormValues({ ...formValues, lastname: target.value });\r\n                return\r\n            case 'identificationCode':\r\n                setFormValues({ ...formValues, identificationCode: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-2\">\r\n            <FormView values={formValues} handleChange={handleChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonIndex;\r\n","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { IPersonBloodDonateInfo } from \"../../dto/IPersonBloodDonateInfo\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\n\r\nconst PersonDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n    const [person, setPerson] = useState({ person: {} });\r\n    const [perBloDonInf, setPersonBloodDonateInfo] = useState({ perBloDonInf: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let perResult = await BaseService.get<Person>('Persons/' + id, appState.token!);\r\n        let bloInfResult = await BaseService.get<IPersonBloodDonateInfo>('Persons/bloodDonateInfo=' + id, appState.token!);\r\n\r\n        if (perResult.ok && perResult.data &&\r\n            bloInfResult.ok && bloInfResult.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPerson({ person: perResult.data });\r\n            setPersonBloodDonateInfo({ perBloDonInf: bloInfResult.data })\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: perResult.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const Info = (props: { person: {}, perBloDonInf: {} }) => {\r\n        if (!isEmptyObject(props.person) && !isEmptyObject(props.perBloDonInf)) {\r\n            const _person = props.person as Person;\r\n            const _perBloDonInf = props.perBloDonInf as IPersonBloodDonateInfo;\r\n            var dateFormat = require(\"dateformat\");\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <h4>Person</h4>\r\n                        <hr />\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-2\">\r\n                                Firstname\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.firstname}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Lastname\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.lastname}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Identification code\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.identificationCode}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Person type\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.personType!.personTypeValue}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Blood group value\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {(_person.bloodGroup != null) ? _person.bloodGroup!.bloodGroupValue : \"unknown\"}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Comments\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.comments}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Created by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.createdBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Create at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_person.createAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Update by\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_person.updateBy}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Updated at\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_person.updatedAt, \"dd/mm/yyyy HH:MM\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Person can donate from\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {dateFormat(_perBloDonInf.date, \"UTC:dd/mm/yyyy\")}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2\">\r\n                                Allowed to donate blood\r\n                            </dt>\r\n                            <dd className=\"col-sm-10\">\r\n                                {_perBloDonInf.allowed ? \"✔\" : \"❌\"}\r\n                            </dd>\r\n                            <dt className=\"col-sm-2 m-1\">\r\n                                <Link className=\"btn btn-primary\" to={\"/Contact/\" + _person.id}>\r\n                                    Person contacts\r\n                                </Link>\r\n                            </dt>\r\n\r\n                            <div className=\"btn-group col-sm-2 m-1\">\r\n                                <button type=\"button\" className=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                    Create\r\n                                </button>\r\n                                <div className=\"dropdown-menu\">\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodTest/Create/personId=\" + _person.id + \"&bloodGroupId=\" + _person.bloodGroupId}>\r\n                                        BloodTest\r\n                                    </Link>\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodDonate/Create/personId=\" + _person.id}>\r\n                                        BloodDonate\r\n                                    </Link>\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodTransfusion/Create/personId=\" + _person.id + \"&bloodGroupId=\" + _person.bloodGroupId}>\r\n                                        BloodTransfusion\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"btn-group col-sm-2 m-1\">\r\n                                <button type=\"button\" className=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                    Index\r\n                                </button>\r\n                                <div className=\"dropdown-menu\">\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodTest/personId=\" + _person.id}>\r\n                                        BloodTest\r\n                                    </Link>\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodDonate/personId=\" + _person.id}>\r\n                                        BloodDonate\r\n                                    </Link>\r\n                                    <Link className=\"dropdown-item\" to={\"/BloodTransfusion/personId=\" + _person.id}>\r\n                                        BloodTransfusion\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </dl>\r\n                    </div>\r\n\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Details</h1>\r\n\r\n            <Info {...person} {...perBloDonInf} />\r\n\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PersonDetails;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BloodGroup } from \"../../dto/BloodGroup\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { PersonType } from \"../../dto/PersonType\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IFormProps } from \"../../types/IFormProps\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\n\r\nconst initialFormValues: Person = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    identificationCode: \"\",\r\n    comments: \"\",\r\n    personTypeId: \"\",\r\n    personType: null,\r\n    bloodGroupId: null,\r\n    bloodGroup: null,\r\n    fullName: \"\",\r\n};\r\n\r\nconst FormView = (props: IFormProps<Person>) => {\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        identificationCode: \"\",\r\n        personType: \"\",\r\n        comments: \"\",\r\n    }\r\n\r\n    const [personTypes, setPersonTypes] = useState([] as PersonType[]);\r\n    const [bloodGroups, setBloodGroups] = useState([] as BloodGroup[]);\r\n    const [submit, setSubmit] = useState(\"\");\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let resultPersonType = await BaseService.getAll<PersonType>('/PersonType', appState.token!);\r\n        let resultBloodGroup = await BaseService.getAll<BloodGroup>('/BloodGroup', appState.token!);\r\n\r\n        if (resultPersonType.ok && resultPersonType.data &&\r\n            resultBloodGroup.ok && resultBloodGroup.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPersonTypes(resultPersonType.data);\r\n            setBloodGroups(resultBloodGroup.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, \r\n                statusCode: (!resultPersonType.ok ?  resultPersonType : resultBloodGroup).statusCode });\r\n        }\r\n    }\r\n\r\n    const handleValidation = () => {\r\n        let formIsValid = true;\r\n\r\n        setAlertMessage(validationTemplate)\r\n\r\n        if(!props.values.firstname){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"firstname\": \"Firstname field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.lastname){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"lastname\": \"Lastname field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.identificationCode){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"identificationCode\": \"IdentificationCode field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if(!props.values.personTypeId){\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"personType\": \"Person type field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n       return formIsValid;\r\n   }\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) {\r\n            return;\r\n        }\r\n\r\n        let response = await BaseService.post(\"Persons\", props.values, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                \"error\": response.messages!\r\n            }));\r\n        } else {\r\n            setSubmit(response.data!.id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <>\r\n            <form asp-action=\"Create\" id=\"create-person\">\r\n                {submit !== \"\" ? <Redirect to={'/Person/' + submit} /> : null}\r\n                <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Firstname</label>\r\n                    <input value={props.values.firstname ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"firstname\"/>\r\n                    <Alert show={alertMessage.firstname !== ''} message={alertMessage.firstname} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Lastname</label>\r\n                    <input value={props.values.lastname ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"lastname\"/>\r\n                    <Alert show={alertMessage.lastname !== ''} message={alertMessage.lastname} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">IdentificationCode</label>\r\n                    <input value={props.values.identificationCode ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"identificationCode\"/>\r\n                    <Alert show={alertMessage.identificationCode !== ''} message={alertMessage.identificationCode} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Comments</label>\r\n                    <textarea value={props.values.comments ?? 0} onChange={(e) => props.handleChange(e.target)} maxLength={1024} className=\"form-control\" rows={5} id=\"comments\"></textarea>\r\n                    <Alert show={alertMessage.comments !== ''} message={alertMessage.comments} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Person type</label>\r\n                    <select value={props.values.personTypeId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"personType\">\r\n                        <option></option>\r\n                        {personTypes.map(personType => {\r\n                            return <option key={personType.id} value={personType.id}>{personType.personTypeValue}</option>\r\n                        })}\r\n                    </select>\r\n                    <Alert show={alertMessage.personType !== ''} message={alertMessage.personType} alertClass={EAlertClass.Danger} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"control-label\">Blood group</label>\r\n                    <select value={props.values.bloodGroupId ?? 0} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"bloodGroup\">\r\n                        <option></option>\r\n                        {bloodGroups.map(bloodGroup => {\r\n                            return <option key={bloodGroup.id} value={bloodGroup.id}>{bloodGroup.bloodGroupValue}</option>\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary\">Create</button>\r\n                </div>\r\n            </form>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst PersonCreate = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'firstname':\r\n                setFormValues({ ...formValues, firstname: target.value });\r\n                return\r\n            case 'lastname':\r\n                setFormValues({ ...formValues, lastname: target.value });\r\n                return\r\n            case 'identificationCode':\r\n                setFormValues({ ...formValues, identificationCode: target.value });\r\n                return\r\n            case 'comments':\r\n                setFormValues({ ...formValues, comments: target.value });\r\n                return\r\n            case 'personType':\r\n                setFormValues({ ...formValues, personTypeId: target.value });\r\n                return\r\n            case 'bloodGroup':\r\n                setFormValues({ ...formValues, bloodGroupId: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create</h1>\r\n            <h4>Blood Person</h4>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <FormView values={formValues} handleChange={handleChange} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default PersonCreate;","import { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Contact } from \"../../dto/Contact\";\r\nimport { ContactType } from \"../../dto/ContactType\";\r\nimport { Person } from \"../../dto/Person\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport { isEmptyObject } from \"jquery\";\r\n\r\nconst initialFormValues: Contact = {\r\n    id: \"00000000-0000-0000-0000-000000000000\",\r\n    createdBy: \"-\",\r\n    createAt: \"0001-01-01T00:00:00\",\r\n    updateBy: \"-\",\r\n    updatedAt: \"0001-01-01T00:00:00\",\r\n    contactValue: \"\",\r\n    contactTypeId: null,\r\n    contactType: null,\r\n    personId: null,\r\n    person: null,\r\n};\r\n\r\nconst ContactIndex = () => {\r\n    const validationTemplate = {\r\n        error: \"\",\r\n        contactValue: \"\",\r\n        contactType: \"\",\r\n    }\r\n\r\n    const { id } = useParams() as IRouteId;\r\n    const [person, setPerson] = useState({ person: {} });\r\n    const [contacts, setContacts] = useState([] as Contact[]);\r\n    const [contactTypes, setContactTypes] = useState([] as ContactType[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [alertMessage, setAlertMessage] = useState(validationTemplate);\r\n\r\n    const loadData = async () => {\r\n        setFormValues({ ...formValues, personId: id });\r\n\r\n        let personResponse = await BaseService.getAll<Person>('Persons/' + id, appState.token!);\r\n        let contactTypeResponse = await BaseService.getAll<ContactType>('contactTypes', appState.token!);\r\n        let contactResponse = await BaseService.getAll<Contact>('Contacts/person=' + id, appState.token!);\r\n\r\n        if (personResponse.ok && personResponse.data &&\r\n            contactTypeResponse.ok && contactTypeResponse.data &&\r\n            contactResponse.ok && contactResponse.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setPerson({ person: personResponse.data });\r\n            setContactTypes(contactTypeResponse.data);\r\n            setContacts(contactResponse.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: contactResponse.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleValidation = () => {\r\n        let formIsValid = true;\r\n\r\n        setAlertMessage(validationTemplate)\r\n\r\n        if (!formValues.contactValue) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                contactValue: \"Contact value field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (formValues.contactValue!.length > 128) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                contactValue: \"Contact value field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (!formValues.contactTypeId) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                contactType: \"Contact type value field can not be empty!\"\r\n            }));\r\n            formIsValid = false;\r\n        }\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    const createSubmit = async (e: Event) => {\r\n        e.preventDefault();\r\n\r\n        if (!handleValidation()) return;\r\n\r\n        let response = await BaseService.post<Contact>(\"Contacts\", formValues, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                error: response.messages!\r\n            }));\r\n        } else {\r\n            const newContacts = contacts.concat(response.data!)\r\n            setContacts(newContacts);\r\n            setFormValues({ ...initialFormValues, personId: id });\r\n        }\r\n    }\r\n\r\n    const deleteSubmit = async (e: Event, id: string) => {\r\n        e.preventDefault();\r\n\r\n        let response = await BaseService.delete<Contact>(\"Contacts/\" + id, appState.token!);\r\n        if (!response.ok) {\r\n            setAlertMessage(prevState => ({\r\n                ...prevState,\r\n                error: response.messages!\r\n            }));\r\n        } else {\r\n            const newContacts = contacts.filter((item) => item.id !== id);\r\n            setContacts(newContacts);\r\n        }\r\n    }\r\n\r\n    const editSubmit = async (e: Event, contact: Contact) => {\r\n        e.preventDefault();\r\n\r\n        await deleteSubmit(e, contact.id);\r\n        setFormValues(prevState => ({\r\n            ...prevState,\r\n            contactValue: contact.contactValue,\r\n            contactTypeId: contact.contactTypeId\r\n        }));\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case 'contactValue':\r\n                setFormValues({ ...formValues, contactValue: target.value });\r\n                return\r\n            case 'contactType':\r\n                setFormValues({ ...formValues, contactTypeId: target.value });\r\n                return\r\n        }\r\n    }\r\n\r\n    const PersonInfo = (props: { person: {} }) => {\r\n        if (!isEmptyObject(contacts)) {\r\n            const _person = props.person as Person;\r\n            return (\r\n                <h2 className=\"m-4\">\r\n                    <span className=\"font-weight-bold mr-2\">\r\n                        {_person.fullName}\r\n                    </span>\r\n                contacts\r\n                </h2>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Alert show={alertMessage.error !== ''} message={alertMessage.error} alertClass={EAlertClass.Danger} />\r\n            <Link to={'/Person/' + id}>Back to person details</Link>\r\n            <PersonInfo {...person} />\r\n            <h3>Create</h3>\r\n            <div className=\"row m-2\">\r\n                <form asp-action=\"Create\" className=\"row\">\r\n                    <div className=\"col\">\r\n                        <label className=\"control-label\">Contact value</label>\r\n                        <input value={formValues.contactValue ?? 0} onChange={(e) => handleChange(e.target)} maxLength={128} className=\"form-control\" id=\"contactValue\" />\r\n                        <Alert show={alertMessage.contactValue !== ''} message={alertMessage.contactValue} alertClass={EAlertClass.Danger} />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label className=\"control-label\">Contact type</label>\r\n                        <select value={formValues.contactTypeId ?? 0} onChange={(e) => handleChange(e.target)} className=\"form-control\" id=\"contactType\">\r\n                            <option></option>\r\n                            {contactTypes.map(contactType => {\r\n                                return <option key={contactType.id} value={contactType.id}>{contactType.contactTypeValue}</option>\r\n                            })}\r\n                        </select>\r\n                        <Alert show={alertMessage.contactType !== ''} message={alertMessage.contactType} alertClass={EAlertClass.Danger} />\r\n                    </div>\r\n                    <div className=\"col mt-4\">\r\n                        <button type=\"submit\" onClick={(e) => createSubmit(e.nativeEvent)} className=\"btn btn-primary\">Create</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            <h3>List</h3>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Contact value</th>\r\n                        <th>Contact type value</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {contacts.map(contact =>\r\n                        <tr key={contact.id.toString()}>\r\n                            <td>{contact.contactValue}</td>\r\n                            <td>{contact.contactType!.contactTypeValue}</td>\r\n                            <td>\r\n                                <button type=\"submit\" onClick={(e) => deleteSubmit(e.nativeEvent, contact.id)} className=\"btn btn-primary mr-2\">Remove</button>\r\n                                <button type=\"submit\" onClick={(e) => editSubmit(e.nativeEvent, contact)} className=\"btn btn-primary\">Edit</button>\r\n                            </td>\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ContactIndex;","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Statistics } from \"../../dto/Statistics\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n\r\nconst BloodDonateStatistics = () => {\r\n    const [statistics, setStatistics] = useState({ statistics: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<Statistics>('Statistics/BloodDonate', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setStatistics({ statistics: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const Info = (props: { statistics: {} }) => {\r\n        if (!isEmptyObject(props.statistics)) {\r\n            const _statistics = props.statistics as Statistics\r\n            return (\r\n                <>\r\n                    <Chart\r\n                        width={800}\r\n                        height={500}\r\n                        chartType=\"PieChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={JSON.parse(_statistics.data ?? \"\")}\r\n                        options={{\r\n                            title: 'Blood donate statistics',\r\n                            titleTextStyle: {\r\n                                fontSize: 24,\r\n                            },\r\n                            pieSliceText: 'label',\r\n                            backgroundColor: '#f8f9fc',\r\n                            pieHole: 0.4,\r\n                        }}\r\n                    />\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Info {...statistics} />\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodDonateStatistics;","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Statistics } from \"../../dto/Statistics\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nconst BloodTransfusionStatistics = () => {\r\n    const [statistics, setStatistics] = useState({ statistics: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<Statistics>('Statistics/BloodTransfusion', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setStatistics({ statistics: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const Info = (props: { statistics: {} }) => {\r\n        if (!isEmptyObject(props.statistics)) {\r\n            const _statistics = props.statistics as Statistics\r\n            return (\r\n                <>\r\n                    <Chart\r\n                        width={800}\r\n                        height={500}\r\n                        chartType=\"PieChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={JSON.parse(_statistics.data ?? \"\")}\r\n                        options={{\r\n                            title: 'Blood transfusions statistics',\r\n                            titleTextStyle: {\r\n                                fontSize: 24,\r\n                            },\r\n                            pieSliceText: 'label',\r\n                            backgroundColor: '#f8f9fc',\r\n                        }}\r\n                    />\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Info {...statistics} />\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BloodTransfusionStatistics;","import { isEmptyObject } from \"jquery\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { Statistics } from \"../../dto/Statistics\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nconst GeneralStatistics = () => {\r\n    const [statistics, setStatistics] = useState({ statistics: {} });\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<Statistics>('Statistics/General', appState.token!);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setStatistics({ statistics: result.data });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const Info = (props: { statistics: {} }) => {\r\n        if (!isEmptyObject(props.statistics)) {\r\n            const _statistics = props.statistics as Statistics\r\n            return (\r\n                <>\r\n                    <Chart\r\n                        width={800}\r\n                        height={500}\r\n                        chartType=\"AreaChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={JSON.parse(_statistics.data ?? \"\")}\r\n                        options={{\r\n                            title: 'Activities',\r\n                            titleTextStyle: {\r\n                                fontSize: 24,\r\n                            },\r\n                            hAxis: { title: 'Date', titleTextStyle: { color: '#333' } },\r\n                            vAxis: { title: 'Amount (ml)', minValue: 0 },\r\n                            backgroundColor: '#f8f9fc',\r\n                        }}\r\n                    />\r\n                </>)\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Info {...statistics} />\r\n            <Loader {...pageStatus} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GeneralStatistics;","\nimport { Redirect, Route, Switch } from 'react-router-dom'\n\nimport LoginLayout from './LoginLayout'\nimport MainLayout from './MainLayout'\n\n// views\nimport Home from './containers/home/HomeIndex'\nimport Login from './containers/identity/Login'\nimport Register from './containers/identity/Register'\nimport Profile from './containers/identity/Profile'\nimport Privacy from './components/Privacy'\n\nimport { AppContextProvider, initialAppState } from './context/AppContext'\nimport { useState } from 'react'\nimport BloodTestIndex from './containers/bloodTest/Index'\nimport BloodTestDetails from './containers/bloodTest/Details'\nimport BloodTestCreate from './containers/bloodTest/Create'\nimport BloodDonateIndex from './containers/bloodDonate/Index'\nimport BloodDonateDetails from './containers/bloodDonate/Details'\nimport BloodDonateCreate from './containers/bloodDonate/Create'\nimport BloodTransfusionIndex from './containers/bloodTransfusion/Index'\nimport BloodTransfusionDetails from './containers/bloodTransfusion/Details'\nimport BloodTransfusionCreate from './containers/bloodTransfusion/Create'\nimport PersonIndex from './containers/person/Index'\nimport PersonDetails from './containers/person/Details'\nimport PersonCreate from './containers/person/Create'\nimport ContactIndex from './containers/contact/Index'\n\nimport BloodDonateStatistics from './containers/statistics/BloodDonate'\nimport BloodTransfusionStatistics from './containers/statistics/BloodTransfusion'\nimport GeneralStatistics from './containers/statistics/General'\n\n\nconst App = () => {\n    const setAuthInfo = (token: string | null, firstName: string, lastName: string): void => {\n        setAppState({ ...appState, token, firstName, lastName });\n    }\n\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo });\n\n    return (\n        <>\n            <AppContextProvider value={appState} >\n                    <Switch>\n\n                        <Route path='/Identity' >\n                            <LoginLayout>\n                                <Switch>\n                                    <Route path='/Identity/Login' exact component={Login} />\n                                    <Route path='/Identity/Register' exact component={Register} />\n                                    {appState.token != null ? \n                                        <Switch>\n                                            <Route path='/Identity/Profile' exact component={Profile} />\n                                        </Switch>\n                                        :\n                                        <Redirect to='/Identity/Login' />\n                                    }\n                                </Switch>\n                            </LoginLayout>\n                        </Route>\n\n                        <Route>\n                            <MainLayout>\n                                {appState.token != null ?\n                                    <Switch>\n                                        <Route path='/' exact component={Home} />\n                                        <Route path='/Privacy' exact component={Privacy} />\n                                        <Route path='/Statistics/BloodDonate' exact component={BloodDonateStatistics} />\n                                        <Route path='/Statistics/BloodTransfusion' exact component={BloodTransfusionStatistics} />\n                                        <Route path='/Statistics/General' exact component={GeneralStatistics} />\n                                        <Route path='/Person' exact component={PersonIndex} />\n                                        <Route path='/Person/Create' exact component={PersonCreate} />\n                                        <Route path='/Contact/:id' exact component={ContactIndex} />\n                                        <Route path='/Person/:id' exact component={PersonDetails} />\n                                        <Route path='/BloodTest' exact component={BloodTestIndex} />\n                                        <Route path='/BloodTest/personId=:personId' exact component={BloodTestIndex} />\n                                        <Route path='/BloodTest/Create/' exact component={BloodTestCreate} />\n                                        <Route path='/BloodTest/Create/personId=:personId&bloodGroupId=:bloodGroupId' exact component={BloodTestCreate} />\n                                        <Route path='/BloodTest/:id' exact component={BloodTestDetails} />\n                                        <Route path='/BloodDonate' exact component={BloodDonateIndex} />\n                                        <Route path='/BloodDonate/personId=:personId' exact component={BloodDonateIndex} />\n                                        <Route path='/BloodDonate/Create' exact component={BloodDonateCreate} />\n                                        <Route path='/BloodDonate/Create/personId=:personId' exact component={BloodDonateCreate} />\n                                        <Route path='/BloodDonate/:id' exact component={BloodDonateDetails} />\n                                        <Route path='/BloodTransfusion' exact component={BloodTransfusionIndex} />\n                                        <Route path='/BloodTransfusion/personId=:personId' exact component={BloodTransfusionIndex} />\n                                        <Route path='/BloodTransfusion/Create' exact component={BloodTransfusionCreate} />\n                                        <Route path='/BloodTransfusion/Create/personId=:personId&bloodGroupId=:bloodGroupId' exact component={BloodTransfusionCreate} />\n                                        <Route path='/BloodTransfusion/:id' exact component={BloodTransfusionDetails} />\n                                    </Switch>\n                                    :\n                                    <Redirect to='/Identity/Login' />\n                                }\n                            </MainLayout>\n                        </Route>\n\n                    </Switch>\n            </AppContextProvider>\n        </>\n    )\n\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n//import 'font-awesome/css/font-awesome.min.css';\n\nimport './assets/sb-admin-2.min.css';\n//import './assets/all.min.css';\nimport './assets/site.css';\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n    </Router>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}